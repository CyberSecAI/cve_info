{
  "cveId": "CVE-2021-46964",
  "version": "1.0.0",
  "timestamp": "2024-12-06T11:32:07.789868+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved scsi qla2xxx Reserve extra IRQ vectors Commit a6dcfe08487e (scsi qla2xxx Limit interrupt vectors to number of CPUs) lowers the number of allocated MSI-X vectors to the number of CPUs. That breaks vector allocation assumptions in qla83xx_iospace_config(), qla24xx_enable_msix() and qla2x00_iospace_config(). Either of the functions computes maximum number of qpairs as ha->max_qpairs = ha->msix_count - 1 (MB interrupt) - 1 (default response queue) - 1 (ATIO, in dual or pure target mode) max_qpairs is set to zero in case of two CPUs and initiator mode. The number is then used to allocate ha->queue_pair_map inside qla2x00_alloc_queues(). No allocation happens and ha->queue_pair_map is left NULL but the driver thinks there are queue pairs available. qla2xxx_queuecommand() tries to find a qpair in the map and crashes if (ha->mqenable) { uint32_t tag uint16_t hwq struct qla_qpair *qpair = NULL tag = blk_mq_unique_tag(cmd->request) hwq = blk_mq_unique_tag_to_hwq(tag) qpair = ha->queue_pair_map[hwq] # <- HERE if (qpair) return qla2xxx_mqueuecommand(host, cmd, qpair) } BUG kernel NULL pointer dereference, address 0000000000000000 #PF supervisor read access in kernel mode #PF error_code(0x0000) - not-present page PGD 0 P4D 0 Oops 0000 [#1] SMP PTI CPU 0 PID 72 Comm k",
  "keyphrases": {
    "rootcause": "",
    "weakness": "crash",
    "impact": [
      "Oops",
      "read access"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "scsi qla2xxx"
  },
  "mitreTechnicalImpacts": []
}