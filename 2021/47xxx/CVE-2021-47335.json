{
    "cveId": "CVE-2021-47335",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved f2fs fix to avoid racing on fsync_entry_slab by multi filesystem instances As syzbot reported, there is an use-after-free issue during f2fs recovery Use-after-free write at 0xffff88823bc16040 (in kfence-#10) kmem_cache_destroy+0x1f/0x120 mm/slab_common.c486 f2fs_recover_fsync_data+0x75b0/0x8380 fs/f2fs/recovery.c869 f2fs_fill_super+0x9393/0xa420 fs/f2fs/super.c3945 mount_bdev+0x26c/0x3a0 fs/super.c1367 legacy_get_tree+0xea/0x180 fs/fs_context.c592 vfs_get_tree+0x86/0x270 fs/super.c1497 do_new_mount fs/namespace.c2905 [inline] path_mount+0x196f/0x2be0 fs/namespace.c3235 do_mount fs/namespace.c3248 [inline] __do_sys_mount fs/namespace.c3456 [inline] __se_sys_mount+0x2f9/0x3b0 fs/namespace.c3433 do_syscall_64+0x3f/0xb0 arch/x86/entry/common.c47 entry_SYSCALL_64_after_hwframe+0x44/0xae The root cause is multi f2fs filesystem instances can race on accessing global fsync_entry_slab pointer, result in use-after-free issue of slab cache, fixes to init/destroy this slab cache only once during module init/destroy procedure to avoid this issue.",
    "keyphrases": {
        "rootcause": "race condition on accessing global fsync_entry_slab pointer",
        "weakness": "use-after-free",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "f2fs"
    }
}
