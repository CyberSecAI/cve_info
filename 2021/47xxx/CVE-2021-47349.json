{
    "cveId": "CVE-2021-47349",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mwifiex bring down link before deleting interface We can deadlock when rmmoding the driver or going through firmware reset, because the cfg80211_unregister_wdev() has to bring down the link for us, ... which then grab the same wiphy lock. nl80211_del_interface() already handles a very similar case, with a nice description /* * We hold RTNL, so this is safe, without RTNL opencount cannot * reach 0, and thus the rdev cannot be deleted. * * We need to do it for the dev_close(), since that will call * the netdev notifiers, and we need to acquire the mutex there * but dont know if we get there from here or from some other * place (e.g. ip link set ... down). */ mutex_unlock(&rdev->wiphy.mtx) ... Do similarly for mwifiex teardown, by ensuring we bring the link down first. Sample deadlock trace [ 247.103516] INFO task rmmod2119 blocked for more than 123 seconds. [ 247.110630] Not tainted 5.12.4 #5 [ 247.115796] echo 0 > /proc/sys/kernel/hung_task_timeout_secs disables this message. [ 247.124557] taskrmmod stateD stack 0 pid 2119 ppid 2114 flags0x00400208 [ 247.133905] Call trace [ 247.136644] __switch_to+0x130/0x170 [ 247.140643] __schedule+0x714/0xa0c [ 247.144548] schedule_preempt_disabled+0x88/0xf4 [ 247.149714] __mutex_lock_common+0x43c/0x750 [ 247.154496] mutex_loc",
    "keyphrases": {
        "rootcause": "deadlock",
        "weakness": "",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "mwifiex driver"
    }
}
