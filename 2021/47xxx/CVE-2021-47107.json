{
    "cveId": "CVE-2021-47107",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved NFSD Fix READDIR buffer overflow If a client sends a READDIR count argument that is too small (say, zero), then the buffer size calculation in the new init_dirlist helper functions results in an underflow, allowing the XDR stream functions to write beyond the actual buffer. This calculation has always been suspect. NFSD has never sanity- checked the READDIR count argument, but the old entry encoders managed the problem correctly. With the commits below, entry encoding changed, exposing the underflow to the pointer arithmetic in xdr_reserve_space(). Modern NFS clients attempt to retrieve as much data as possible for each READDIR request. Also, we have no unit tests that exercise the behavior of READDIR at the lower bound of @count values. Thus this case was missed during testing.",
    "keyphrases": {
        "rootcause": "underflow in buffer size calculation",
        "weakness": "buffer overflow",
        "impact": "write beyond actual buffer",
        "vector": "If a client sends a READDIR count argument that is too small (say, zero)",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "NFSD"
    }
}
