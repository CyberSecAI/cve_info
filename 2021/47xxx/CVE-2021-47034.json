{
  "cveId": "CVE-2021-47034",
  "version": "1.0.0",
  "timestamp": "2024-12-06T11:32:07.789868+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved powerpc/64s Fix pte update for kernel memory on radix When adding a PTE a ptesync is needed to order the update of the PTE with subsequent accesses otherwise a spurious fault may be raised. radix__set_pte_at() does not do this for performance gains. For non-kernel memory this is not an issue as any faults of this kind are corrected by the page fault handler. For kernel memory these faults are not handled. The current solution is that there is a ptesync in flush_cache_vmap() which should be called when mapping from the vmalloc region. However, map_kernel_page() does not call flush_cache_vmap(). This is troublesome in particular for code patching with Strict RWX on radix. In do_patch_instruction() the page frame that contains the instruction to be patched is mapped and then immediately patched. With no ordering or synchronization between setting up the PTE and writing to the page it is possible for faults. As the code patching is done using __put_user_asm_goto() the resulting fault is obscured - but using a normal store instead it can be seen BUG Unable to handle kernel data access on write at 0xc008000008f24a3c Faulting instruction address 0xc00000000008bd74 Oops Kernel access of bad area, sig 11 [#1] LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=2048 NUMA PowerNV Modules linked in nop_module(PO+) [last unloaded nop_module] CPU 4 PID 757 Comm sh Tainted P O 5.10.0-rc5-0136",
  "keyphrases": {
    "rootcause": "missing ptesync",
    "weakness": "",
    "impact": [
      "Oops",
      "spurious fault"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "5.10.0-rc5-0136",
    "component": "PowerPC 64s"
  },
  "mitreTechnicalImpacts": []
}