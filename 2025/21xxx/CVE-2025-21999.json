{
    "cveId": "CVE-2025-21999",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved proc fix UAF in proc_get_inode() Fix race between rmmod and /proc/XXXs inode instantiation. The bug is that pde->proc_ops dont belong to /proc, it belongs to a module, therefore dereferencing it after /proc entry has been registered is a bug unless use_pde/unuse_pde() pair has been used. use_pde/unuse_pde can be avoided (2 atomic ops!) because pde->proc_ops never changes so information necessary for inode instantiation can be saved _before_ proc_register() in PDE itself and used later, avoiding pde->proc_ops->... dereference. rmmod lookup sys_delete_module proc_lookup_de pde_get(de) proc_get_inode(dir->i_sb, de) mod->exit() proc_remove remove_proc_subtree proc_entry_rundown(de) free_module(mod) if (S_ISREG(inode->i_mode)) if (de->proc_ops->proc_read_iter) --> As module is already freed, will trigger UAF BUG unable to handle page fault for address fffffbfff80a702b PGD 817fc4067 P4D 817fc4067 PUD 817fc0067 PMD 102ef4067 PTE 0 Oops Oops 0000",
    "keyphrases": {
        "component": "proc_get_inode()",
        "rootcause": "race between rmmod and /proc/XXXs inode instantiation",
        "vector": "",
        "weakness": "UAF, UAF bug",
        "product": "Linux kernel",
        "impact": "Oops",
        "attacker": "",
        "version": ""
    }
}
