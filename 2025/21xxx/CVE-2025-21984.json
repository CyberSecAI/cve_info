{
    "cveId": "CVE-2025-21984",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm fix kernel BUG when userfaultfd_move encounters swapcache userfaultfd_move() checks whether the PTE entry is present or a swap entry. - If the PTE entry is present, move_present_pte() handles folio migration by setting src_folio->index = linear_page_index(dst_vma, dst_addr) - If the PTE entry is a swap entry, move_swap_pte() simply copies the PTE to the new dst_addr. This approach is incorrect because, even if the PTE is a swap entry, it can still reference a folio that remains in the swap cache. This creates a race window between steps 2 and 4. 1. add_to_swap The folio is added to the swapcache. 2. try_to_unmap PTEs are converted to swap entries. 3. pageout The folio is written back. 4. Swapcache is cleared. If userfaultfd_move() occurs in the window between steps 2 and 4, after the swap PTE has been moved to the destination, accessing the destination triggers do_swap_page(), which may locate the folio in the swapcache. However, since the folios index has not been updated to match the destination VMA, do_swap_page() will detect a mismatch. This can result in two critical issues depending on the system configuration. If KSM is disabled, both small and large folios can trigger a BUG during the add_rmap operation due to page_pgoff(folio, page) != linear_page_index(vma, address) [ 13.336953] page refcount6 mapcount1 mapping00000000f43db19c index0xffffaf150 pfn0x4667c [ 13.337520] head order2 mapcount1 entire_mapcount0 nr_pages_mapped1 pincount0 [ 13.337716] memcgffff00000405f000 [ 13.337849] anon flags 0x3fffc0000020459(locked|uptodate|dirty|owner_priv_1|head|swapbacked|node=0|zone=0|lastcpupid=0xffff) [ 13.338630] raw 03fffc0000020459 ffff80008507b538 ffff80008507b538 ffff000006260361 [ 13.338831] raw 0000000ffffaf150 0000000000004000 0000000600000000 ffff00000405f000 [ 13.339031] head 03fffc0000020459 ffff80008507b538 ffff80008507b538 ffff000006260361 [ 13.339204] head 0000000ffffaf150 0000000000004000 0000000600000000 ffff00000405f000 [ 13.339375] head 03fffc0000000202 fffffdffc0199f01 ffffffff00000000 0000000000000001 [ 13.339546] head 0000000000000004 0000000000000000 00000000ffffffff 0000000000000000 [ 13.339736] page dumped because VM_BUG_ON_PAGE(page_pgoff(folio, page) != linear_page_index(vma, address)) [ 13.340190] ------------[ cut here ]------------ [ 13.340316] kernel BUG at mm/rmap.c1380! [ 13.340683] Internal error Oops - BUG 00000000f2000800",
    "keyphrases": {
        "rootcause": "race condition",
        "weakness": "",
        "impact": "kernel panic",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "userfaultfd_move()"
    }
}
