{
    "cveId": "CVE-2025-21753",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved btrfs fix use-after-free when attempting to join an aborted transaction When we are trying to join the current transaction and if its aborted, we read its aborted field after unlocking fs_info->trans_lock and without holding any extra reference count on it. This means that a concurrent task that is aborting the transaction may free the transaction before we read its aborted field, leading to a use-after-free. Fix this by reading the aborted field while holding fs_info->trans_lock since any freeing task must first acquire that lock and set fs_info->running_transaction to NULL before freeing the transaction. This was reported by syzbot and Dmitry with the following stack traces from KASAN ================================================================== BUG KASAN slab-use-after-free in join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c278 Read of size 4 at addr ffff888011839024 by task kworker/u49/1128 CPU 0 UID 0 PID 1128 Comm kworker/u49 Not tainted 6.13.0-rc7-syzkaller-00019-gc45323b7560e #0 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Workqueue events_unbound btrfs_async_reclaim_data_space Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x241/0x360 lib/dump_stack.c120 print_address_description mm/kasan/report.c378 [inline] print_report+0x169/0x550 mm/kasan/report.c489 kasan_report+0x143/0x180 mm/kasan/report.c602 join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c278 start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c697 flush_space+0x448/0xcf0 fs/btrfs/space-info.c803 btrfs_async_reclaim_data_space+0x159/0x510 fs/btrfs/space-info.c1321 process_one_work kernel/workqueue.c3236 [inline] process_scheduled_works+0xa66/0x1840 kernel/workqueue.c3317 worker_thread+0x870/0xd30 kernel/workqueue.c3398 kthread+0x2f0/0x390 kernel/kthread.c389 ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c147 ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S244 Allocated by task 5315 kasan_save_stack mm/kasan/common.c47 [inline] kasan_save_track+0x3f/0x80 mm/kasan/common.c68 poison_kmalloc_redzone mm/kasan/common.c377 [inline] __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c394 kasan_kmalloc include/linux/kasan.h260 [inline] __kmalloc_cache_noprof+0x243/0x390 mm/slub.c4329 kmalloc_noprof include/linux/slab.h901 [inline] join_transaction+0x144/0xda0 fs/btrfs/transaction.c308 start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c697 btrfs_create_common+0x1b2/0x2e0 fs/btrfs/inode.c6572 lookup_open fs/namei.c3649 [inline] open_last_lookups fs/namei.c3748 [inline] path_openat+0x1c03/0x3590 fs/namei.c3984 do_filp_open+0x27f/0x4e0 fs/namei.c4014 do_sys_openat2+0x13e/0x1d0 fs/open.c1402 do_sys_open fs/open.c1417 [inline] __do_sys_creat fs/open.c1495 [inline] __se_sys_creat fs/open.c1489 [inline] __x64_sys_creat+0x123/0x170 fs/open.c1489 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xf3/0x230 arch/x86/entry/common.c83 entry_SYSCALL_64_after_hwframe+0x77/0x7f Freed by task 5336 kasan_save_stack mm/kasan/common.c47 [inline] kasan_save_track+0x3f/0x80 mm/kasan/common.c68 kasan_save_free_info+0x40/0x50 mm/kasan/generic.c582 poison_slab_object mm/kasan/common.c247 [inline] __kasan_slab_free+0x59/0x70 mm/kasan/common.c264 kasan_slab_free include/linux/kasan.h233 [inline] slab_free_hook mm/slub.c2353 [inline] slab_free mm/slub.c4613 [inline] kfree+0x196/0x430 mm/slub.c4761 cleanup_transaction fs/btrfs/transaction.c2063 [inline] btrfs_commit_transaction+0x2c97/0x3720 fs/btrfs/transaction.c2598 insert_balance_item+0x1284/0x20b0 fs/btrfs/volumes.c3757 btrfs_balance+0x992/ ---truncated---",
    "keyphrases": {
        "rootcause": "read a field after unlocking a lock and without holding a reference count",
        "weakness": "use-after-free",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "6.13.0-rc7-syzkaller",
        "component": "btrfs fix use-after-free"
    }
}
