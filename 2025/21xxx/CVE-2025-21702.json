{
    "cveId": "CVE-2025-21702",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved pfifo_tail_enqueue Drop new packet when sch->limit == 0 Expected behaviour In case we reach schedulers limit, pfifo_tail_enqueue() will drop a packet in schedulers queue and decrease schedulers qlen by one. Then, pfifo_tail_enqueue() enqueue new packet and increase schedulers qlen by one. Finally, pfifo_tail_enqueue() return `NET_XMIT_CN` status code. Weird behaviour In case we set `sch->limit == 0` and trigger pfifo_tail_enqueue() on a scheduler that has no packet, the drop a packet step will do nothing. This means the schedulers qlen still has value equal 0. Then, we continue to enqueue new packet and increase schedulers qlen by one. In summary, we can leverage pfifo_tail_enqueue() to increase qlen by one and return `NET_XMIT_CN` status code. The problem is Lets say we have two qdiscs Qdisc_A and Qdisc_B. - Qdisc_As type must have ->graft() function to create parent/child relationship. Lets say Qdisc_As type is `hfsc`. Enqueue packet to this qdisc will trigger `hfsc_enqueue`. - Qdisc_Bs type is pfifo_head_drop. Enqueue packet to this qdisc will trigger `pfifo_tail_enqueue`. - Qdisc_B is configured to have `sch->limit == 0`. - Qdisc_A is configured to route the enqueueds packet to Qdisc_B. Enqueue packet through Qdisc_A will lead to - hfsc_enqueue(Qdisc_A) -> pfifo_tail_enqueue(Qdisc_B) - Qdisc_B->q.qlen += 1 - pfifo_tail_enqueue() return `NET_XMIT_CN` - hfsc_enqueue() check for `NET_XMIT_SUCCESS` and see `NET_XMIT_CN` => hfsc_enqueue() dont increase qlen of Qdisc_A. The whole process lead to a situation where Qdisc_A->q.qlen == 0 and Qdisc_B->q.qlen == 1. Replace hfsc with other type (for example drr) still lead to the same problem. This violate the design where parents qlen should equal to the sum of its childrensqlen. Bug impact This issue can be used for user->kernel privilege escalation when it is reachable.",
    "keyphrases": {
        "component": "pfifo_tail_enqueue",
        "rootcause": "",
        "vector": "",
        "weakness": "sch->limit == 0 and pfifo_tail_enqueue() on an empty scheduler",
        "product": "Linux kernel",
        "impact": "increase qlen, privilege escalation",
        "attacker": "",
        "version": ""
    }
}
