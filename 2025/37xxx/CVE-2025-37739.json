{
  "cveId": "CVE-2025-37739",
  "version": "1.0.0",
  "timestamp": "2025-07-04T16:12:41.853043+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved f2fs fix to avoid out-of-bounds access in f2fs_truncate_inode_blocks() syzbot reports an UBSAN issue as below ------------[ cut here ]------------ UBSAN array-index-out-of-bounds in fs/f2fs/node.h38110 index 18446744073709550692 is out of range for type __le32[5] (aka unsigned int[5]) CPU 0 UID 0 PID 5318 Comm syz.0.0 Not tainted 6.14.0-rc3-syzkaller-00060-g6537cfb395f3 #0 Call Trace __dump_stack lib/dump_stack.c94 [inline] dump_stack_lvl+0x241/0x360 lib/dump_stack.c120 ubsan_epilogue lib/ubsan.c231 [inline] __ubsan_handle_out_of_bounds+0x121/0x150 lib/ubsan.c429 get_nid fs/f2fs/node.h381 [inline] f2fs_truncate_inode_blocks+0xa5e/0xf60 fs/f2fs/node.c1181 f2fs_do_truncate_blocks+0x782/0x1030 fs/f2fs/file.c808 f2fs_truncate_blocks+0x10d/0x300 fs/f2fs/file.c836 f2fs_truncate+0x417/0x720 fs/f2fs/file.c886 f2fs_file_write_iter+0x1bdb/0x2550 fs/f2fs/file.c5093 aio_write+0x56b/0x7c0 fs/aio.c1633 io_submit_one+0x8a7/0x18a0 fs/aio.c2052 __do_sys_io_submit fs/aio.c2111 [inline] __se_sys_io_submit+0x171/0x2e0 fs/aio.c2081 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xf3/0x230 arch/x86/entry/common.c83 entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP 00330x7f238798cde9 index 18446744073709550692 (decimal, unsigned long long) = 0xfffffffffffffc64 (hexadecimal, unsigned long long) = -924 (decimal, long long) In f2fs_truncate_inode_blocks(), UBSAN detects that get_nid() tries to access .i_nid[-924], it means both offset[0] and level should zero. The possible case should be in f2fs_do_truncate_blocks(), we try to truncate inode size to zero, however, dn.ofs_in_node is zero and dn.node_page is not an inode page, so it fails to truncate inode page, and then pass zeroed free_from to f2fs_truncate_inode_blocks(), result in this issue. if (dn.ofs_in_node || IS_INODE(dn.node_page)) { f2fs_truncate_data_blocks_range(&dn, count) free_from += count } I guess the reason why dn.node_page is not an inode page could be there are multiple nat entries share the same node block address, once the node block address was reused, f2fs_get_node_page() may load a non-inode block. Lets add a sanity check for such condition to avoid out-of-bounds access issue.",
  "keyphrases": {
    "rootcause": "UBSAN array-index-out-of-bounds",
    "weakness": "out-of-bounds access",
    "impact": "array-index-out-of-bounds access",
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "6.14.0-rc3-syzkaller-00060-g6537cfb395f3",
    "component": "f2fs_truncate_inode_blocks()"
  },
  "mitreTechnicalImpacts": []
}