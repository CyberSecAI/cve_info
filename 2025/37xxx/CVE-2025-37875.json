{
    "cveId": "CVE-2025-37875",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved igc fix PTM cycle trigger logic Writing to clear the PTM status valid bit while the PTM cycle is triggered results in unreliable PTM operation. To fix this, clear the PTM trigger and status after each PTM transaction. The issue can be reproduced with the following $ sudo phc2sys -R 1000 -O 0 -i tsn0 -m Note 1000 Hz (-R 1000) is unrealistically large, but provides a way to quickly reproduce the issue. PHC2SYS exits with ioctl PTP_OFFSET_PRECISE Connection timed out when the PTM transaction fails This patch also fixes a hang in igc_probe() when loading the igc driver in the kdump kernel on systems supporting PTM. The igc driver running in the base kernel enables PTM trigger in igc_probe(). Therefore the driver is always in PTM trigger mode, except in brief periods when manually triggering a PTM cycle. When a crash occurs, the NIC is reset while PTM trigger is enabled. Due to a hardware problem, the NIC is subsequently in a bad busmaster state and doesnt handle register reads/writes. When running igc_probe() in the kdump kernel, the first register access to a NIC register hangs driver probing and ultimately breaks kdump. With this patch, igc has PTM trigger disabled most of the time, and the trigger is only enabled for very brief (10 - 100 us) periods when manually triggering a PTM cycle. Chances that a crash occurs during a PTM trigger are not 0, but extremely reduced.",
    "keyphrases": {
        "component": "igc driver",
        "rootcause": "Writing to clear the PTM status valid bit while the PTM cycle is triggered results in unreliable PTM operation",
        "vector": "",
        "weakness": "",
        "product": "Linux kernel",
        "impact": "hang in igc_probe(), ioctl PTP_OFFSET_PRECISE Connection timed out, unreliable PTM operation",
        "attacker": "",
        "version": ""
    }
}
