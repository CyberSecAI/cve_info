{
    "cveId": "CVE-2025-38008",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm/page_alloc fix race condition in unaccepted memory handling The page allocator tracks the number of zones that have unaccepted memory using static_branch_enc/dec() and uses that static branch in hot paths to determine if it needs to deal with unaccepted memory. Borislav and Thomas pointed out that the tracking is racy operations on static_branch are not serialized against adding/removing unaccepted pages to/from the zone. Sanity checks inside static_branch machinery detects it WARNING CPU 0 PID 10 at kernel/jump_label.c276 __static_key_slow_dec_cpuslocked+0x8e/0xa0 The comment around the WARN() explains the problem /* * Warn about the -1 case though since that means a * decrement is concurrent with a first (0->1) increment. IOW * people are trying to disable something that wasnt yet fully * enabled. This suggests an ordering problem on the user side. */ The effect of this static_branch optimization is only visible on microbenchmark. Instead of adding more complexity around it, remove it altogether.",
    "keyphrases": {
        "rootcause": "race condition",
        "weakness": "",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "mm/page_alloc"
    }
}
