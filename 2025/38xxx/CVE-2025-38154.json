{
  "cveId": "CVE-2025-38154",
  "version": "1.0.0",
  "timestamp": "2025-07-05T08:16:57.403025+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved bpf, sockmap Avoid using sk_socket after free when sending The sk->sk_socket is not locked or referenced in backlog thread, and during the call to skb_send_sock(), there is a race condition with the release of sk_socket. All types of sockets(tcp/udp/unix/vsock) will be affected. Race conditions CPU0 CPU1 backlogskb_send_sock sendmsg_unlocked sock_sendmsg sock_sendmsg_nosec close(fd) ... ops->release() -> sock_map_close() sk_socket->ops = NULL free(socket) sock->ops->sendmsg ^ panic here The ref of psock become 0 after sock_map_close() executed. void sock_map_close() { ... if (likely(psock)) { ... // !! here we remove psock and the ref of psock become 0 sock_map_remove_links(sk, psock) psock = sk_psock_get(sk) if (unlikely(!psock)) goto no_psock work) ? die_addr+0x40/0xa0 ? exc_general_protection+0x14c/0x230 ? asm_exc_general_protection+0x26/0x30 ? sock_sendmsg+0x21d/0x440 ? sock_sendmsg+0x3e0/0x440 ? __pfx_sock_sendmsg+0x10/0x10 __skb_send_sock+0x543/0xb70 sk_psock_backlog+0x247/0xb80 ...",
  "keyphrases": {
    "rootcause": "race condition",
    "weakness": "",
    "impact": "panic",
    "vector": "",
    "attacker": "",
    "product": "",
    "version": "",
    "component": "backlog thread"
  },
  "mitreTechnicalImpacts": []
}