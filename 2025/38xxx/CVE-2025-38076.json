{
    "cveId": "CVE-2025-38076",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved alloc_tag allocate percpu counters for module tags dynamically When a module gets unloaded it checks whether any of its tags are still in use and if so, we keep the memory containing modules allocation tags alive until all tags are unused. However percpu counters referenced by the tags are freed by free_module(). This will lead to UAF if the memory allocated by a module is accessed after module was unloaded. To fix this we allocate percpu counters for module allocation tags dynamically and we keep it alive for tags which are still in use after module unloading. This also removes the requirement of a larger PERCPU_MODULE_RESERVE when memory allocation profiling is enabled because percpu memory for counters does not need to be reserved anymore.",
    "keyphrases": {
        "component": "",
        "rootcause": "access after module unloading",
        "vector": "",
        "weakness": "UAF, use-after-free",
        "product": "Linux kernel",
        "impact": "",
        "attacker": "",
        "version": ""
    }
}
