{
    "cveId": "CVE-2023-52910",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved iommu/iova Fix alloc iova overflows issue In __alloc_and_insert_iova_range, there is an issue that retry_pfn overflows. The value of iovad->anchor.pfn_hi is ~0UL, then when iovad->cached_node is iovad->anchor, curr_iova->pfn_hi + 1 will overflow. As a result, if the retry logic is executed, low_pfn is updated to 0, and then new_pfn cached_node is assigned as iovad->anchor. For example, the iova domain size is 10M, start_pfn is 0x1_F000_0000, and the iova size allocated for the first time is 11M. The following is the log information, new->pfn_lo is smaller than iovad->cached_node. Example log as follows [ 223.798112][T1705487] sh [nameiova&]__alloc_and_insert_iova_range start_pfn0x1f0000,retry_pfn0x0,size0xb00,limit_pfn0x1f0a00 [ 223.799590][T1705487] sh [nameiova&]__alloc_and_insert_iova_range success start_pfn0x1f0000,new->pfn_lo0x1efe00,new->pfn_hi0x1f08ff 2. The node with the largest iova->pfn_lo value in the iova domain is deleted, iovad->cached_node will be updated to iovad->anchor, and then the alloc iova size exceeds the maximum iova size that can be allocated in the domain. After judging that retry_pfn is less than limit_pfn, call retry_pfn+1 to fix the overflow issue.",
    "keyphrases": {
        "rootcause": "retry_pfn overflows in __alloc_and_insert_iova_range",
        "weakness": "integer overflow",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "iommu/iova"
    }
}
