{
    "cveId": "CVE-2023-52978",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved riscv kprobe Fixup kernel panic when probing an illegal position The kernel would panic when probed for an illegal position. eg (CONFIG_RISCV_ISA_C=n) echo phello kernel_clone+0x16 a0=%a0 >> kprobe_events echo 1 > events/kprobes/hello/enable cat trace Kernel panic - not syncing stack-protector Kernel stack is corrupted in __do_sys_newfstatat+0xb8/0xb8 CPU 0 PID 111 Comm sh Not tainted 6.2.0-rc1-00027-g2d398fe49a4d #490 Hardware name riscv-virtio,qemu (DT) Call Trace [] dump_backtrace+0x38/0x48 [] show_stack+0x50/0x68 [] dump_stack_lvl+0x60/0x84 [] dump_stack+0x20/0x30 [] panic+0x160/0x374 [] generic_handle_arch_irq+0x0/0xa8 [] sys_newstat+0x0/0x30 [] sys_clone+0x20/0x30 [] ret_from_syscall+0x0/0x4 ---[ end Kernel panic - not syncing stack-protector Kernel stack is corrupted in __do_sys_newfstatat+0xb8/0xb8 ]--- That is because the kprobes ebreak instruction broke the kernels original code. The user should guarantee the correction of the probe position, but it couldnt make the kernel panic. This patch adds arch_check_kprobe in arch_prepare_kprobe to prevent an illegal position (Such as the middle of an instruction).",
    "keyphrases": {
        "component": "kprobes",
        "rootcause": "",
        "vector": "",
        "weakness": "stack corruption",
        "product": "Linux kernel",
        "impact": "Kernel panic, stack is corrupted",
        "attacker": "",
        "version": "6.2.0-rc1-00027-g2d398fe49a4d"
    }
}
