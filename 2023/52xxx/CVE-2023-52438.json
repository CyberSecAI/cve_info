{
    "cveId": "CVE-2023-52438",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved binder fix use-after-free in shinkers callback The mmap read lock is used during the shrinkers callback, which means that using alloc->vma pointer isnt safe as it can race with munmap(). As of commit dd2283f2605e (mm mmap zap pages with read mmap_sem in munmap) the mmap lock is downgraded after the vma has been isolated. I was able to reproduce this issue by manually adding some delays and triggering page reclaiming through the shrinkers debug sysfs. The following KASAN report confirms the UAF ================================================================== BUG KASAN slab-use-after-free in zap_page_range_single+0x470/0x4b8 Read of size 8 at addr ffff356ed50e50f0 by task bash/478 CPU 1 PID 478 Comm bash Not tainted 6.6.0-rc5-00055-g1c8b86a3799f-dirty #70 Hardware name linux,dummy-virt (DT) Call trace zap_page_range_single+0x470/0x4b8 binder_alloc_free_page+0x608/0xadc __list_lru_walk_one+0x130/0x3b0 list_lru_walk_node+0xc4/0x22c binder_shrink_scan+0x108/0x1dc shrinker_debugfs_scan_write+0x2b4/0x500 full_proxy_write+0xd4/0x140 vfs_write+0x1ac/0x758 ksys_write+0xf0/0x1dc __arm64_sys_write+0x6c/0x9c Allocated by task 492 kmem_cache_alloc+0x130/0x368 vm_area_alloc+0x2c/0x190 mmap_region+0x258/0x18bc do_mmap+0x694/0xa60 vm_mmap_pgoff+0x170/0x29c ksys_mmap_pgoff+0x290/0x3a0 __arm64_sys_mmap+0xcc/0x144 Freed by task 491"
}
