{
    "cveId": "CVE-2023-52668",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved btrfs zoned fix lock ordering in btrfs_zone_activate() The btrfs CI reported a lockdep warning as follows by running generic generic/129. WARNING possible circular locking dependency detected 6.7.0-rc5+ #1 Not tainted ------------------------------------------------------ kworker/u55/793427 is trying to acquire lock ffff88813256d028 (&cache->lock){+.+.}-{22}, at btrfs_zone_finish_one_bg+0x5e/0x130 but task is already holding lock ffff88810a23a318 (&fs_info->zone_active_bgs_lock){+.+.}-{22}, at btrfs_zone_finish_one_bg+0x34/0x130 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #1 (&fs_info->zone_active_bgs_lock){+.+.}-{22} ... -> #0 (&cache->lock){+.+.}-{22} ... This is because we take fs_info->zone_active_bgs_lock after a block_groups lock in btrfs_zone_activate() while doing the opposite in other places. Fix the issue by expanding the fs_info->zone_active_bgs_locks critical section and taking it before a block_groups lock.",
    "keyphrases": {
        "rootcause": "lockdep warning",
        "weakness": "circular locking dependency",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "6.7.0-rc5+",
        "component": "btrfs"
    }
}
