{
    "cveId": "CVE-2023-52739",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved Fix page corruption caused by racy check in __free_pages When we upgraded our kernel, we started seeing some page corruption like the following consistently BUG Bad page state in process ganesha.nfsd pfn1304ca page0000000022261c55 refcount0 mapcount-128 mapping0000000000000000 index0x0 pfn0x1304ca flags 0x17ffffc0000000() raw 0017ffffc0000000 ffff8a513ffd4c98 ffffeee24b35ec08 0000000000000000 raw 0000000000000000 0000000000000001 00000000ffffff7f 0000000000000000 page dumped because nonzero mapcount CPU 0 PID 15567 Comm ganesha.nfsd Kdump loaded Tainted P B O 5.10.158-1.nutanix.20221209.el7.x86_64 #1 Hardware name VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 04/05/2016 Call Trace dump_stack+0x74/0x96 bad_page.cold+0x63/0x94 check_new_page_bad+0x6d/0x80 rmqueue+0x46e/0x970 get_page_from_freelist+0xcb/0x3f0 ? _cond_resched+0x19/0x40 __alloc_pages_nodemask+0x164/0x300 alloc_pages_current+0x87/0xf0 skb_page_frag_refill+0x84/0x110 ... Sometimes, it would also show up as corruption in the free list pointer and cause crashes. After bisecting the issue, we found the issue started from commit e320d3012d25 (mm/page_alloc.c fix freeing non-compound pages) if (put_page_testzero(page)) free_the_page(page, order) else if (!PageHead(page)) while (order-- > 0) free_the_page(page + (1 << order), ord",
    "keyphrases": {
        "rootcause": "racy check in __free_pages",
        "weakness": "",
        "impact": "page corruption",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
