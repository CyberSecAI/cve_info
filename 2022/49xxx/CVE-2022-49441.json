{
    "cveId": "CVE-2022-49441",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved tty fix deadlock caused by calling printk() under tty_port->lock pty_write() invokes kmalloc() which may invoke a normal printk() to print failure message. This can cause a deadlock in the scenario reported by syz-bot below CPU0 CPU1 CPU2 ---- ---- ---- lock(console_owner) lock(&port_lock_key) lock(&port->lock) lock(&port_lock_key) lock(&port->lock) lock(console_owner) As commit dbdda842fe96 (printk Add console owner and waiter logic to load balance console writes) said, such deadlock can be prevented by using printk_deferred() in kmalloc() (which is invoked in the section guarded by the port->lock). But there are too many printk() on the kmalloc() path, and kmalloc() can be called from anywhere, so changing printk() to printk_deferred() is too complicated and inelegant. Therefore, this patch chooses to specify __GFP_NOWARN to kmalloc(), so that printk() will not be called, and this deadlock problem can be avoided. Syzbot reported the following lockdep error ====================================================== WARNING possible circular locking dependency detected 5.4.143-00237-g08ccc19a-dirty #10 Not tainted ------------------------------------------------------ syz-executor.4/29420 is trying to acquire lock ffffffff8aedb2a0 (console_owner){....}-{00}, at console_trylock_spinning kernel/printk/printk.c1752 [inline] ffffffff8aedb2a0 (console_owner){....}-{00}, at vprintk_emit+0x2ca/0x470 kernel/printk/printk.c2023 but task is already holding lock ffff8880119c9158 (&port->lock){-.-.}-{22}, at pty_write+0xf4/0x1f0 drivers/tty/pty.c120 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #2 (&port->lock){-.-.}-{22} __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h110 [inline] _raw_spin_lock_irqsave+0x35/0x50 kernel/locking/spinlock.c159 tty_port_tty_get drivers/tty/tty_port.c288 [inline] lock) tty_port_default_wakeup+0x1d/0xb0 drivers/tty/tty_port.c47 serial8250_tx_chars+0x530/0xa80 drivers/tty/serial/8250/8250_port.c1767 serial8250_handle_irq.part.0+0x31f/0x3d0 drivers/tty/serial/8250/8250_port.c1854 serial8250_handle_irq drivers/tty/serial/8250/8250_port.c1827 [inline] #1 (&port_lock_key){-.-.}-{22} __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h110 [inline] _raw_spin_lock_irqsave+0x35/0x50 kernel/locking/spinlock.c159 serial8250_console_write+0x184/0xa40 drivers/tty/serial/8250/8250_port.c3198 #0 (console_owner){....}-{00} [...] lock_acquire+0x127/0x340 kernel/locking/lockdep.c4734 console_trylock_spinning kernel/printk/printk.c1773 ---truncated---",
    "keyphrases": {
        "rootcause": "tty fix deadlock",
        "weakness": "deadlock",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "5.4.143-00237-g08ccc19a-dirty",
        "component": "tty"
    }
}
