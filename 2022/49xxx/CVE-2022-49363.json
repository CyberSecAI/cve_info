{
  "cveId": "CVE-2022-49363",
  "version": "1.0.0",
  "timestamp": "2025-07-04T16:12:41.853043+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved f2fs fix to do sanity check on block address in f2fs_do_zero_range() As Yanming reported in bugzilla https//bugzilla.kernel.org/show_bug.cgi?id=215894 I have encountered a bug in F2FS file system in kernel v5.17. I have uploaded the system call sequence as case.c, and a fuzzed image can be found in google net disk The kernel should enable CONFIG_KASAN=y and CONFIG_KASAN_INLINE=y. You can reproduce the bug by running the following commands kernel BUG at fs/f2fs/segment.c2291! Call Trace f2fs_invalidate_blocks+0x193/0x2d0 f2fs_fallocate+0x2593/0x4a70 vfs_fallocate+0x2a5/0xac0 ksys_fallocate+0x35/0x70 __x64_sys_fallocate+0x8e/0xf0 do_syscall_64+0x3b/0x90 entry_SYSCALL_64_after_hwframe+0x44/0xae The root cause is, after image was fuzzed, block mapping info in inode will be inconsistent with SIT table, so in f2fs_fallocate(), it will cause panic when updating SIT with invalid blkaddr. Lets fix the issue by adding sanity check on block address before updating SIT table with it.",
  "keyphrases": {
    "rootcause": "block mapping info in inode is inconsistent with SIT table",
    "weakness": "",
    "impact": [
      "kernel BUG",
      "panic"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "v5.17",
    "component": "F2FS file system"
  },
  "mitreTechnicalImpacts": []
}