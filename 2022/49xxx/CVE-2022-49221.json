{
    "cveId": "CVE-2022-49221",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved drm/msm/dp populate connector of struct dp_panel DP CTS test case 4.2.2.6 has valid edid with bad checksum on purpose and expect DP source return correct checksum. During drm edid read, correct edid checksum is calculated and stored at connectorreal_edid_checksum. The problem is struct dp_panelconnector never be assigned, instead the connector is stored in struct msm_dpconnector. When we run compliance testing test case 4.2.2.6 dp_panel_handle_sink_request() wont have a valid edid set in struct dp_paneledid so well try to use the connectors real_edid_checksum and hit a NULL pointer dereference error because the connector pointer is never assigned. Changes in V2 -- populate panel connector at msm_dp_modeset_init() instead of at dp_panel_read_sink_caps() Changes in V3 -- remove unhelpful kernel crash trace commit text -- remove renaming dp_display parameter to dp Changes in V4 -- add more details to commit text Changes in v10 -- group into one series Changes in v11 -- drop drm/msm/dp dp_link_parse_sink_count() return immediately if aux read Signee-off-by Kuogee Hsieh",
    "keyphrases": {
        "rootcause": "",
        "weakness": "NULL pointer dereference",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "drm/msm/dp populate connector of struct dp_panel"
    }
}
