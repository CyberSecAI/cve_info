{
    "cveId": "CVE-2022-49886",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved x86/tdx Panic on bad configs that #VE on private memory access All normal kernel memory is TDX private memory. This includes everything from kernel stacks to kernel text. Handling exceptions on arbitrary accesses to kernel memory is essentially impossible because they can happen in horribly nasty places like kernel entry/exit. But, TDX hardware can theoretically _deliver_ a virtualization exception (#VE) on any access to private memory. But, its not as bad as it sounds. TDX can be configured to never deliver these exceptions on private memory with a TD attribute called ATTR_SEPT_VE_DISABLE. The guest has no way to *set* this attribute, but it can check it. Ensure ATTR_SEPT_VE_DISABLE is set in early boot. panic() if it is unset. There is no sane way for Linux to run with this attribute clear so a panic() is appropriate. Theres small window during boot before the check where kernel has an early #VE handler. But the handler is only for port I/O and will also panic() as soon as it sees any other #VE, such as a one generated by a private memory access. [ dhansen Rewrite changelog and rebase on new tdx_parse_tdinfo(). Add Kirills tested-by because I made changes since he wrote this. ]",
    "keyphrases": {
        "rootcause": "bad configs",
        "weakness": "",
        "impact": "panic on bad configs",
        "vector": "private memory access",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "x86/tdx"
    }
}
