{
    "cveId": "CVE-2022-49838",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved sctp clear out_curr if all frag chunks of current msg are pruned A crash was reported by Zhen Chen list_del corruption, ffffa035ddf01c18->next is NULL WARNING CPU 1 PID 250682 at lib/list_debug.c49 __list_del_entry_valid+0x59/0xe0 RIP 0010__list_del_entry_valid+0x59/0xe0 Call Trace sctp_sched_dequeue_common+0x17/0x70 [sctp] sctp_sched_fcfs_dequeue+0x37/0x50 [sctp] sctp_outq_flush_data+0x85/0x360 [sctp] sctp_outq_uncork+0x77/0xa0 [sctp] sctp_cmd_interpreter.constprop.0+0x164/0x1450 [sctp] sctp_side_effects+0x37/0xe0 [sctp] sctp_do_sm+0xd0/0x230 [sctp] sctp_primitive_SEND+0x2f/0x40 [sctp] sctp_sendmsg_to_asoc+0x3fa/0x5c0 [sctp] sctp_sendmsg+0x3d5/0x440 [sctp] sock_sendmsg+0x5b/0x70 and in sctp_sched_fcfs_dequeue() it dequeued a chunk from stream out_curr outq while this outq was empty. Normally stream->out_curr must be set to NULL once all frag chunks of current msg are dequeued, as we can see in sctp_sched_dequeue_done(). However, in sctp_prsctp_prune_unsent() as it is not a proper dequeue, sctp_sched_dequeue_done() is not called to do this. This patch is to fix it by simply setting out_curr to NULL when the last frag chunk of current msg is dequeued from out_curr stream in sctp_prsctp_prune_unsent().",
    "keyphrases": {
        "component": "sctp",
        "rootcause": "in sctp_prsctp_prune_unsent(), sctp_sched_dequeue_done() is not called to set stream->out_curr to NULL when last frag chunk of current msg is dequeued",
        "vector": "",
        "weakness": "",
        "product": "Linux kernel",
        "impact": "A crash, list_del corruption, list_del out of bounds",
        "attacker": "",
        "version": ""
    }
}
