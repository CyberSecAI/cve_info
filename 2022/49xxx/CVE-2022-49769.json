{
    "cveId": "CVE-2022-49769",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved gfs2 Check sb_bsize_shift after reading superblock Fuzzers like to scribble over sb_bsize_shift but in reality its very unlikely that this field would be corrupted on its own. Nevertheless it should be checked to avoid the possibility of messy mount errors due to bad calculations. Its always a fixed value based on the block size so we can just check that its the expected value. Tested with mkfs.gfs2 -O -p lock_nolock /dev/vdb for i in 0 -1 64 65 32 33 do gfs2_edit -p sb field sb_bsize_shift $i /dev/vdb mount /dev/vdb /mnt/test && umount /mnt/test done Before this patch we get a withdraw after [ 76.413681] gfs2 fsid=loop0.0 fatal invalid metadata block [ 76.413681] bh = 19 (type exp=5, found=4) [ 76.413681] function = gfs2_meta_buffer, file = fs/gfs2/meta_io.c, line = 492 and with UBSAN configured we also get complaints like [ 76.373395] UBSAN shift-out-of-bounds in fs/gfs2/ops_fstype.c29519 [ 76.373815] shift exponent 4294967287 is too large for 64-bit type long unsigned int After the patch, these complaints dont appear, mount fails immediately and we get an explanation in dmesg.",
    "keyphrases": {
        "rootcause": "",
        "weakness": "shift-out-of-bounds",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
