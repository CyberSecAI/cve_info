{
    "cveId": "CVE-2022-49078",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved lz4 fix LZ4_decompress_safe_partial read out of bound When partialDecoding, it is EOF if weve either filled the output buffer or cant proceed with reading an offset for following match. In some extreme corner cases when compressed data is suitably corrupted, UAF will occur. As reported by KASAN [1], LZ4_decompress_safe_partial may lead to read out of bound problem during decoding. lz4 upstream has fixed it [2] and this issue has been disscussed here [3] before. current decompression routine was ported from lz4 v1.8.3, bumping lib/lz4 to v1.9.+ is certainly a huge work to be done later, so, wed better fix it first. [1] https//lore.kernel.org/all/000000000000830d1205cf7f0477@google.com/ [2] https//github.com/lz4/lz4/commit/c5d6f8a8be3927c0bec91bcc58667a6cfad244ad# [3] https//lore.kernel.org/all/CC666AE8-4CA4-4951-B6FB-A2EFDE3AC03B@fb.com/",
    "keyphrases": {
        "rootcause": "",
        "weakness": "UAF",
        "impact": "read out of bound problem",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "LZ4_decompress_safe_partial"
    }
}
