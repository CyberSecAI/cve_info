{
    "cveId": "CVE-2022-49840",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved bpf, test_run Fix alignment problem in bpf_prog_test_run_skb() We got a syzkaller problem because of aarch64 alignment fault if KFENCE enabled. When the size from user bpf program is an odd number, like 399, 407, etc, it will cause the struct skb_shared_infos unaligned access. As seen below BUG KFENCE use-after-free read in __skb_clone+0x23c/0x2a0 net/core/skbuff.c1032 Use-after-free read at 0xffff6254fffac077 (in kfence-#213) __lse_atomic_add arch/arm64/include/asm/atomic_lse.h26 [inline] arch_atomic_add arch/arm64/include/asm/atomic.h28 [inline] arch_atomic_inc include/linux/atomic-arch-fallback.h270 [inline] atomic_inc include/asm-generic/atomic-instrumented.h241 [inline] __skb_clone+0x23c/0x2a0 net/core/skbuff.c1032 skb_clone+0xf4/0x214 net/core/skbuff.c1481 ____bpf_clone_redirect net/core/filter.c2433 [inline] bpf_clone_redirect+0x78/0x1c0 net/core/filter.c2420 bpf_prog_d3839dd9068ceb51+0x80/0x330 bpf_dispatcher_nop_func include/linux/bpf.h728 [inline] bpf_test_run+0x3c0/0x6c0 net/bpf/test_run.c53 bpf_prog_test_run_skb+0x638/0xa7c net/bpf/test_run.c594 bpf_prog_test_run kernel/bpf/syscall.c3148 [inline] __do_sys_bpf kernel/bpf/syscall.c4441 [inline] __se_sys_bpf+0xad0/0x1634 kernel/bpf/syscall.c4381 kfence-#213 0xffff6254fffac000-0xffff6254fffac196, size=407, cache=kmalloc-512 allocated by task 15074 on cpu 0 at 1342.585390s kmalloc include/linux/slab.h568 [inline] kzalloc include/linux/slab.h675 [inline] bpf_test_init.isra.0+0xac/0x290 net/bpf/test_run.c191 bpf_prog_test_run_skb+0x11c/0xa7c net/bpf/test_run.c512 bpf_prog_test_run kernel/bpf/syscall.c3148 [inline] __do_sys_bpf kernel/bpf/syscall.c4441 [inline] __se_sys_bpf+0xad0/0x1634 kernel/bpf/syscall.c4381 __arm64_sys_bpf+0x50/0x60 kernel/bpf/syscall.c4381 To fix the problem, we adjust @size so that (@size + @hearoom) is a multiple of SMP_CACHE_BYTES. So we make sure the struct skb_shared_info is aligned to a cache line.",
    "keyphrases": {
        "rootcause": "use-after-free",
        "weakness": "use-after-free read",
        "impact": "alignment fault",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "bpf, test_run"
    }
}
