{
    "cveId": "CVE-2022-49085",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved drbd Fix five use after free bugs in get_initial_state In get_initial_state, it calls notify_initial_state_done(skb,..) if cb->args[5]==1. If genlmsg_put() failed in notify_initial_state_done(), the skb will be freed by nlmsg_free(skb). Then get_initial_state will goto out and the freed skb will be used by return value skb->len, which is a uaf bug. Whats worse, the same problem goes even further skb can also be freed in the notify_*_state_change -> notify_*_state calls below. Thus 4 additional uaf bugs happened. My patch lets the problem callee functions notify_initial_state_done and notify_*_state_change return an error code if errors happen. So that the error codes could be propagated and the uaf bugs can be avoid. v2 reports a compilation warning. This v3 fixed this warning and built successfully in my local environment with no additional warnings. v2 https//lore.kernel.org/patchwork/patch/1435218/",
    "keyphrases": {
        "component": "",
        "rootcause": "use after free, uaf",
        "vector": "",
        "weakness": "",
        "product": "Linux kernel",
        "impact": "",
        "attacker": "",
        "version": ""
    }
}
