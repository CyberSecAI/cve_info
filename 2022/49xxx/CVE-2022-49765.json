{
    "cveId": "CVE-2022-49765",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved net/9p use a dedicated spinlock for trans_fd Shamelessly copying the explanation from Tetsuo Handas suggested patch[1] (slightly reworded) syzbot is reporting inconsistent lock state in p9_req_put()[2], for p9_tag_remove() from p9_req_put() from IRQ context is using spin_lock_irqsave() on struct p9_client->lock but trans_fd (not from IRQ context) is using spin_lock(). Since the locks actually protect different things in client.c and in trans_fd.c, just replace trans_fd.cs lock by a new one specific to the transport (client.cs protect the idr for fid/tag allocations, while trans_fd.cs protects its own req list and request status field that acts as the transports state machine)",
    "keyphrases": {
        "rootcause": "improper synchronization",
        "weakness": "",
        "impact": "inconsistent lock state",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "net/9p module"
    }
}
