{
    "cveId": "CVE-2022-49892",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved ftrace Fix use-after-free for dynamic ftrace_ops KASAN reported a use-after-free with ftrace ops [1]. It was found from vmcore that perf had registered two ops with the same content successively, both dynamic. After unregistering the second ops, a use-after-free occurred. In ftrace_shutdown(), when the second ops is unregistered, the FTRACE_UPDATE_CALLS command is not set because there is another enabled ops with the same content. Also, both ops are dynamic and the ftrace callback function is ftrace_ops_list_func, so the FTRACE_UPDATE_TRACE_FUNC command will not be set. Eventually the value of command will be 0 and ftrace_shutdown() will skip the rcu synchronization. However, ftrace may be activated. When the ops is released, another CPU may be accessing the ops. Add the missing synchronization to fix this problem. [1] BUG KASAN use-after-free in __ftrace_ops_list_func kernel/trace/ftrace.c7020 [inline] BUG KASAN use-after-free in ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c7049 Read of size 8 at addr ffff56551965bbc8 by task syz-executor.2/14468 CPU 1 PID 14468 Comm syz-executor.2 Not tainted 5.10.0 #7 Hardware name linux,dummy-virt (DT) Call trace dump_backtrace+0x0/0x40c arch/arm64/kernel/stacktrace.c132 show_stack+0x30/0x40 arch/arm64/kernel/stacktrace.c196 __dump_stack lib/dump_stack.c77 [inline] dump_stack+0x1b4/0x248 lib/dump_stack.c118 print_address_description.constprop.0+0x28/0x48c mm/kasan/report.c387 __kasan_report mm/kasan/report.c547 [inline] kasan_report+0x118/0x210 mm/kasan/report.c564 check_memory_region_inline mm/kasan/generic.c187 [inline] __asan_load8+0x98/0xc0 mm/kasan/generic.c253 __ftrace_ops_list_func kernel/trace/ftrace.c7020 [inline] ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c7049 ftrace_graph_call+0x0/0x4 __might_sleep+0x8/0x100 include/linux/perf_event.h1170 __might_fault mm/memory.c5183 [inline] __might_fault+0x58/0x70 mm/memory.c5171 do_strncpy_from_user lib/strncpy_from_user.c41 [inline] strncpy_from_user+0x1f4/0x4b0 lib/strncpy_from_user.c139 getname_flags+0xb0/0x31c fs/namei.c149 getname+0x2c/0x40 fs/namei.c209 [...] Allocated by task 14445 kasan_save_stack+0x24/0x50 mm/kasan/common.c48 kasan_set_track mm/kasan/common.c56 [inline] __kasan_kmalloc mm/kasan/common.c479 [inline] __kasan_kmalloc.constprop.0+0x110/0x13c mm/kasan/common.c449 kasan_kmalloc+0xc/0x14 mm/kasan/common.c493 kmem_cache_alloc_trace+0x440/0x924 mm/slub.c2950 kmalloc include/linux/slab.h563 [inline] kzalloc include/linux/slab.h675 [inline] perf_event_alloc.part.0+0xb4/0x1350 kernel/events/core.c11230 perf_event_alloc kernel/events/core.c11733 [inline] __do_sys_perf_event_open kernel/events/core.c11831 [inline] __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c11723 __arm64_sys_perf_event_open+0x6c/0x80 kernel/events/core.c11723 [...] Freed by task 14445 kasan_save_stack+0x24/0x50 mm/kasan/common.c48 kasan_set_track+0x24/0x34 mm/kasan/common.c56 kasan_set_free_info+0x20/0x40 mm/kasan/generic.c358 __kasan_slab_free.part.0+0x11c/0x1b0 mm/kasan/common.c437 __kasan_slab_free mm/kasan/common.c445 [inline] kasan_slab_free+0x2c/0x40 mm/kasan/common.c446 slab_free_hook mm/slub.c1569 [inline] slab_free_freelist_hook mm/slub.c1608 [inline] slab_free mm/slub.c3179 [inline] kfree+0x12c/0xc10 mm/slub.c4176 perf_event_alloc.part.0+0xa0c/0x1350 kernel/events/core.c11434 perf_event_alloc kernel/events/core.c11733 [inline] __do_sys_perf_event_open kernel/events/core.c11831 [inline] __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c11723 [...]",
    "keyphrases": {
        "rootcause": "use-after-free",
        "weakness": "",
        "impact": "BUG KASAN use-after-free",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "5.10.0",
        "component": "ftrace_ops_list_func"
    }
}
