{
    "cveId": "CVE-2022-49902",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved block Fix possible memory leak for rq_wb on add_disk failure kmemleak reported memory leaks in device_add_disk() kmemleak 3 new suspected memory leaks unreferenced object 0xffff88800f420800 (size 512) comm modprobe, pid 4275, jiffies 4295639067 (age 223.512s) hex dump (first 32 bytes) 04 00 00 00 08 00 00 00 01 00 00 00 00 00 00 00 ................ 00 e1 f5 05 00 00 00 00 00 00 00 00 00 00 00 00 ................ backtrace [] kmalloc_trace+0x26/0x60 [] wbt_init+0x50/0x6f0 [] wbt_enable_default+0x157/0x1c0 [] blk_register_queue+0x2a4/0x420 [] device_add_disk+0x6fd/0xe40 [] nbd_dev_add+0x828/0xbf0 [nbd] ... It is because the memory allocated in wbt_enable_default() is not released in device_add_disk() error path. Normally, these memory are freed in del_gendisk() rq_qos_exit() rqos->ops->exit(rqos) wbt_exit() So rq_qos_exit() is called to free the rq_wb memory for wbt_init(). However in the error path of device_add_disk(), only blk_unregister_queue() is called and make rq_wb memory leaked. Add rq_qos_exit() to the error path to fix it.",
    "keyphrases": {
        "rootcause": "memory leak in device_add_disk() error path",
        "weakness": "unreferenced object",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
