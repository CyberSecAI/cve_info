{
    "cveId": "CVE-2022-48797",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm dont try to NUMA-migrate COW pages that have other uses Oded Gabbay reports that enabling NUMA balancing causes corruption with his Gaudi accelerator test load All the details are in the bug, but the bottom line is that somehow, this patch causes corruption when the numa balancing feature is enabled AND we dont use process affinity AND we use GUP to pin pages so our accelerator can DMA to/from system memory. Either disabling numa balancing, using process affinity to bind to specific numa-node or reverting this patch causes the bug to disappear and Oded bisected the issue to commit 09854ba94c6a (mm do_wp_page() simplification). Now, the NUMA balancing shouldnt actually be changing the writability of a page, and as such shouldnt matter for COW. But it appears it does. Suspicious. However, regardless of that, the condition for enabling NUMA faults in change_pte_range() is nonsensical. It uses page_mapcount(page) to decide if a COW page should be NUMA-protected or not, and that makes absolutely no sense. The number of mappings a page has is irrelevant not only does GUP get a reference to a page as in Odeds case, but the other mappings migth be paged out and the only reference to them would be in the page count. Since we should never try to NUMA-balance a page that we cant move anyway due to other references, just fix the code to use page_count(). Oded confirms that th",
    "keyphrases": {
        "rootcause": "NUMA balancing causes corruption",
        "weakness": "",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "mm do_wp_page()"
    }
}
