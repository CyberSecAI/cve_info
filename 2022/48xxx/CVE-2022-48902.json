{
    "cveId": "CVE-2022-48902",
    "version": "1.0.0",
    "timestamp": "2024-12-19T22:22:49.126128+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolvedbtrfs do not WARN_ON() if we have PageError setWhenever we do any extent buffer operations we callassert_eb_page_uptodate() to complain loudly if were operating on annon-uptodate page. Our overnight tests caught this warning earlier thisweek WARNING CPU 1 PID 553508 at fs/btrfs/extent_io.c6849 assert_eb_page_uptodate+0x3f/0x50 CPU 1 PID 553508 Comm kworker/u413 Tainted G W 5.17.0-rc3+ #564 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014 Workqueue btrfs-cache btrfs_work_helper RIP 0010assert_eb_page_uptodate+0x3f/0x50 RSP 0018ffffa961440a7c68 EFLAGS 00010246 RAX 0017ffffc0002112 RBX ffffe6e74453f9c0 RCX 0000000000001000 RDX ffffe6e74467c887 RSI ffffe6e74453f9c0 RDI ffff8d4c5efc2fc0 RBP 0000000000000d56 R08 ffff8d4d4a224000 R09 0000000000000000 R10 00015817fa9d1ef0 R11 000000000000000c R12 00000000000007b1 R13 ffff8d4c5efc2fc0 R14 0000000001500000 R15 0000000001cb1000 FS 0000000000000000(0000) GSffff8d4dbbd00000(0000) knlGS0000000000000000 CS 0010 DS 0000 ES 0000 CR0 0000000080050033 CR2 00007ff31d3448d8 CR3 0000000118be8004 CR4 0000000000370ee0 Call Trace extent_buffer_test_bit+0x3f/0x70 free_space_test_bit+0xa6/0xc0 load_free_space_tree+0x1f6/0x470 caching_thread+0x454/0x630 ? rcu_read_lock_sched_held+0x12/0x60 ? rcu_read_lock_sched_held+0x12/0x60 ? rcu_read_lock_sched_held+0x12/0x60 ? lock_release+0x1f0/0x2d0 btrfs_work_helper+0xf2/0x3e0 ? lock_release+0x1f0/0x2d0 ? finish_task_switch.isra.0+0xf9/0x3a0 process_one_work+0x26d/0x580 ? process_one_work+0x580/0x580 worker_thread+0x55/0x3b0 ? process_one_work+0x580/0x580 kthread+0xf0/0x120 ? kthread_complete_and_exit+0x20/0x20 ret_from_fork+0x1f/0x30This was partially fixed by c2e39305299f01 (btrfs clear extent bufferuptodate when we fail to write it), however all that fix did was keepus from finding extent buffers after a failed writeout. It didnt keepus from continuing to use a buffer that we already had found.In this case were searching the commit root to cache the block group,so we can start committing the transaction and switch the commit rootand then start writing. After the switch we can look up an extentbuffer that hasnt been written yet and start processing that blockgroup. Then we fail to write that block out and clear Uptodate on thepage, and then we start spewing these errors.Normally were protected by the tree lock to a certain degree here. Ifwe read a block we have that block read locked, and we block the writerfrom locking the block before we submit it for the write. However thisisnt necessarily fool proof because the read could happen before we dothe submit_bio and after we locked and unlocked the extent buffer.Also in this particular case we have path->skip_locking set, so thatwont save us here. Well simply get a block that was valid when weread it, but became invalid while we were using it.What we really want is to catch the case where weve read a block butits not marked Uptodate. On read we ClearPageError(), so if were!Uptodate and !Error we know we didnt do the right thing for readingthe page.Fix this by checking !Uptodate && !Error, this way we will not complainif our buffer gets invalidated while were using it, and well maintainthe spirit of the check which is to make sure we have a fully in-cacheblock while were messing with it.",
    "keyphrases": {
        "rootcause": "The code was using an extent buffer that was not marked uptodate, which could lead to data corruption.",
        "weakness": "The code was not properly checking if an extent buffer was uptodate before using it.",
        "impact": "Data corruption could occur if the code used an extent buffer that was not uptodate.",
        "vector": "The vulnerability can be triggered by reading a block that was valid when read, but became invalid while being used.",
        "attacker": "An attacker could potentially trigger the vulnerability by causing a block to become invalid while being used.",
        "product": "Linux Kernel",
        "version": "5.17.0-rc3+",
        "component": "btrfs"
    }
}
