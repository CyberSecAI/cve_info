{
    "cveId": "CVE-2022-48925",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved RDMA/cma Do not change route.addr.src_addr outside state checks If the state is not idle then resolve_prepare_src() should immediately fail and no change to global state should happen. However, it unconditionally overwrites the src_addr trying to build a temporary any address. For instance if the state is already RDMA_CM_LISTEN then this will corrupt the src_addr and would cause the test in cma_cancel_operation() if (cma_any_addr(cma_src_addr(id_priv)) && !id_priv->cma_dev) Which would manifest as this trace from syzkaller BUG KASAN use-after-free in __list_add_valid+0x93/0xa0 lib/list_debug.c26 Read of size 8 at addr ffff8881546491e0 by task syz-executor.1/32204 CPU 1 PID 32204 Comm syz-executor.1 Not tainted 5.12.0-rc8-syzkaller #0 Hardware name Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011 Call Trace __dump_stack lib/dump_stack.c79 [inline] dump_stack+0x141/0x1d7 lib/dump_stack.c120 print_address_description.constprop.0.cold+0x5b/0x2f8 mm/kasan/report.c232 __kasan_report mm/kasan/report.c399 [inline] kasan_report.cold+0x7c/0xd8 mm/kasan/report.c416 __list_add_valid+0x93/0xa0 lib/list_debug.c26 __list_add include/linux/list.h67 [inline] list_add_tail include/linux/list.h100 [inline] cma_listen_on_all drivers/infiniband/core/cma.c2557 [inline] rdma_listen+0x787/0xe00 drivers/infiniband/core/cma.c3751"
}
