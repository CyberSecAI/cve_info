{
    "cveId": "CVE-2022-48629",
    "version": "1.0.0",
    "timestamp": "2024-12-19T22:22:49.126128+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolvedcrypto qcom-rng - ensure buffer for generate is completely filledThe generate function in struct rng_alg expects that the destinationbuffer is completely filled if the function returns 0. qcom_rng_read()can run into a situation where the buffer is partially filled withrandomness and the remaining part of the buffer is zeroed sinceqcom_rng_generate() doesnt check the return value. This issue canbe reproduced by running the following from libkcapi kcapi-rng -b 9000000 > OUTFILEThe generated OUTFILE will have three huge sections that contain allzeros, and this is caused by the code where the testval & PRNG_STATUS_DATA_AVAIL fails.Lets fix this issue by ensuring that qcom_rng_read() always returnswith a full buffer if the function returns success. Lets also haveqcom_rng_generate() return the correct value.Heres some statistics from the ent project(https//www.fourmilab.ch/random/) that shows information about thequality of the generated numbers $ ent -c qcom-random-before Value Char Occurrences Fraction 0 606748 0.067416 1 33104 0.003678 2 33001 0.003667 ... 253 ? 32883 0.003654 254 ? 33035 0.003671 255 ? 33239 0.003693 Total 9000000 1.000000 Entropy = 7.811590 bits per byte. Optimum compression would reduce the size of this 9000000 byte file by 2 percent. Chi square distribution for 9000000 samples is 9329962.81, and randomly would exceed this value less than 0.01 percent of the times. Arithmetic mean value of data bytes is 119.3731 (127.5 = random). Monte Carlo value for Pi is 3.197293333 (error 1.77 percent). Serial correlation coefficient is 0.159130 (totally uncorrelated = 0.0).Without this patch, the results of the chi-square test is 0.01%, andthe numbers are certainly not random according to ents project page.The results improve with this patch $ ent -c qcom-random-after Value Char Occurrences Fraction 0 35432 0.003937 1 35127 0.003903 2 35424 0.003936 ... 253 ? 35201 0.003911 254 ? 34835 0.003871 255 ? 35368 0.003930 Total 9000000 1.000000 Entropy = 7.999979 bits per byte. Optimum compression would reduce the size of this 9000000 byte file by 0 percent. Chi square distribution for 9000000 samples is 258.77, and randomly would exceed this value 42.24 percent of the times. Arithmetic mean value of data bytes is 127.5006 (127.5 = random). Monte Carlo value for Pi is 3.141277333 (error 0.01 percent). Serial correlation coefficient is 0.000468 (totally uncorrelated = 0.0).This change was tested on a Nexus 5 phone (msm8974 SoC).",
    "keyphrases": {
        "rootcause": "The qcom_rng_read() function in the Linux kernel's crypto subsystem does not ensure that the destination buffer is completely filled with random data when qcom_rng_generate() returns success. Instead, it partially fills the buffer with randomness and then zero-fills the remaining part of the buffer. This leads to non-random output and poor entropy.",
        "weakness": "The `qcom_rng_read` function does not validate the return value of `qcom_rng_generate` and doesn't handle the case when the buffer is not fully filled.",
        "impact": "The generated random numbers are not random and have low entropy, which can compromise the security of cryptographic operations that rely on it. The chi-square test results were 0.01% before the patch, and it was improved to 42.24% after the patch.",
        "vector": "The vulnerability can be triggered by using the `/dev/random` or `/dev/urandom` interfaces, which may lead to unpredictable or biased output for cryptographic operations.",
        "attacker": "An attacker can potentially exploit this vulnerability if the random number generator is used for cryptographic purposes, thereby reducing the security strength.",
        "product": "Linux Kernel",
        "version": "Not specified in the text",
        "component": "crypto qcom-rng"
    }
}
