{
    "cveId": "CVE-2022-48839",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved net/packet fix slab-out-of-bounds access in packet_recvmsg() syzbot found that when an AF_PACKET socket is using PACKET_COPY_THRESH and mmap operations, tpacket_rcv() is queueing skbs with garbage in skb->cb[], triggering a too big copy [1] Presumably, users of af_packet using mmap() already gets correct metadata from the mapped buffer, we can simply make sure to clear 12 bytes that might be copied to user space later. BUG KASAN stack-out-of-bounds in memcpy include/linux/fortify-string.h225 [inline] BUG KASAN stack-out-of-bounds in packet_recvmsg+0x56c/0x1150 net/packet/af_packet.c3489 Write of size 165 at addr ffffc9000385fb78 by task syz-executor233/3631 CPU 0 PID 3631 Comm syz-executor233 Not tainted 5.17.0-rc7-syzkaller-02396-g0b3660695e80 #0 Hardware name Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011 Call Trace __dump_stack lib/dump_stack.c88 [inline] dump_stack_lvl+0xcd/0x134 lib/dump_stack.c106 print_address_description.constprop.0.cold+0xf/0x336 mm/kasan/report.c255 __kasan_report mm/kasan/report.c442 [inline] kasan_report.cold+0x83/0xdf mm/kasan/report.c459 check_region_inline mm/kasan/generic.c183 [inline] kasan_check_range+0x13d/0x180 mm/kasan/generic.c189 memcpy+0x39/0x60 mm/kasan/shadow.c66 memcpy include/linux/fortify-string.h225 [inline] packet_recvmsg+0x56c/0x1150 net/packet/af_packet.c3489 sock_recvmsg_nosec net/socke"
}
