{
    "cveId": "CVE-2022-48853",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved swiotlb fix info leak with DMA_FROM_DEVICE The problem Im addressing was discovered by the LTP test covering cve-2018-1000204. A short description of what happens follows 1) The test case issues a command code 00 (TEST UNIT READY) via the SG_IO interface with dxfer_len == 524288, dxdfer_dir == SG_DXFER_FROM_DEV and a corresponding dxferp. The peculiar thing about this is that TUR is not reading from the device. 2) In sg_start_req() the invocation of blk_rq_map_user() effectively bounces the user-space buffer. As if the device was to transfer into it. Since commit a45b599ad808 (scsi sg allocate with __GFP_ZERO in sg_build_indirect()) we make sure this first bounce buffer is allocated with GFP_ZERO. 3) For the rest of the story we keep ignoring that we have a TUR, so the device wont touch the buffer we prepare as if the we had a DMA_FROM_DEVICE type of situation. My setup uses a virtio-scsi device and the buffer allocated by SG is mapped by the function virtqueue_add_split() which uses DMA_FROM_DEVICE for the in sgs (here scatter-gather and not scsi generics). This mapping involves bouncing via the swiotlb (we need swiotlb to do virtio in protected guest like s390 Secure Execution, or AMD SEV). 4) When the SCSI TUR is done, we first copy back the content of the second (that is swiotlb) bounce buffer (which most likely contains some previous IO data)",
    "keyphrases": {
        "rootcause": "",
        "weakness": "",
        "impact": "info leak",
        "vector": "TEST UNIT READY command",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
