{
    "cveId": "CVE-2022-48814",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved net dsa seville register the mdiobus under devres As explained in commits 74b6d7d13307 (net dsa realtek register the MDIO bus under devres) 5135e96a3dd2 (net dsa dont allocate the slave_mii_bus using devres) mdiobus_free() will panic when called from devm_mdiobus_free() remove on ->shutdown) do not apply. But there is one more which applies here. If the DSA master itself is on a bus that calls ->remove from ->shutdown (like dpaa2-eth, which is on the fsl-mc bus), there is a device link between the switch and the DSA master, and device_links_unbind_consumers() will unbind the seville switch driver on shutdown. So the same treatment must be applied to all DSA switch drivers, which is either use devres for both the mdiobus allocation and registration, or dont use devres at all. The seville driver has a code structure that could accommodate both the mdiobus_unregister and mdiobus_free calls, but it has an external dependency upon mscc_miim_setup() from mdio-mscc-miim.c, which calls devm_mdiobus_alloc_size() on its behalf. So rather than restructuring that, and exporting yet one more symbol mscc_miim_teardown(), lets work with devres and replace",
    "keyphrases": {
        "rootcause": "wrong use of devm_{mdiobus,i2c}_alloc_size and devm_mdiobus_free",
        "weakness": "",
        "impact": "panic",
        "vector": "accessing uninitialized memory",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "net dsa seville register the mdiobus under devres"
    }
}
