{
    "cveId": "CVE-2022-36086",
    "version": "1.0.0",
    "timestamp": "2024-11-03T18:37:50.907685+00:00",
    "description": "linked_list_allocator is an allocator usable for no_std systems. Prior to version 0.10.2, the heap initialization methods were missing a minimum size check for the given heap size argument. This could lead to out-of-bound writes when a heap was initialized with a size smaller than `3 * size_of` because of metadata write operations. This vulnerability impacts all the initialization functions on the `Heap` and `LockedHeap` types, including `Heapnew`, `Heapinit`, `Heapinit_from_slice`, and `LockedHeapnew`. It also affects multiple uses of the `Heapextend` method. Version 0.10.2 contains a patch for the issue. As a workaround, ensure that the heap is only initialized with a size larger than `3 * size_of` and that the `Heapextend` method is only called with sizes larger than `2 * size_of()`. Also, ensure that the total heap size is (and stays) a multiple of `2 * size_of()`.",
    "keyphrases": {
        "rootcause": "missing minimum size check",
        "weakness": "out-of-bound writes",
        "impact": "",
        "vector": "heap initialization with a size smaller than 3 * size_of",
        "attacker": "",
        "product": "componentlinked_list_allocator",
        "version": "prior to 0.10.2",
        "component": [
            "Heap",
            "LockedHeap",
            "Heapextend"
        ]
    },
    "mitreTechnicalImpacts": []
}
