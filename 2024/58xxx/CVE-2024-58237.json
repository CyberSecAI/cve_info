{
    "cveId": "CVE-2024-58237",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved bpf consider that tail calls invalidate packet pointers Tail-called programs could execute any of the helpers that invalidate packet pointers. Hence, conservatively assume that each tail call invalidates packet pointers. Making the change in bpf_helper_changes_pkt_data() automatically makes use of check_cfg() logic that computes changes_pkt_data effect for global sub-programs, such that the following program could be rejected int tail_call(struct __sk_buff *sk) { bpf_tail_call_static(sk, &jmp_table, 0) return 0 } SEC(tc) int not_safe(struct __sk_buff *sk) { int *p = (void *)(long)sk->data ... make p valid ... tail_call(sk) *p = 42 /* this is unsafe */ ... } The tc_bpf2bpf.csubprog_tc() needs change mark it as a function that can invalidate packet pointers. Otherwise, it cant be freplaced with tailcall_freplace.centry_freplace() that does a tail call.",
    "keyphrases": {
        "rootcause": "",
        "weakness": "",
        "impact": "execute any of the helpers that invalidate packet pointers",
        "vector": "tail calls",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "bpf"
    }
}
