{
    "cveId": "CVE-2024-42317",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm/huge_memory avoid PMD-size page cache if needed xarray cant support arbitrary page cache size. the largest and supported page cache size is defined as MAX_PAGECACHE_ORDER by commit 099d90642a71 (mm/filemap make MAX_PAGECACHE_ORDER acceptable to xarray). However, its possible to have 512MB page cache in the huge memorys collapsing path on ARM64 system whose base page size is 64KB. 512MB page cache is breaking the limitation and a warning is raised when the xarray entry is split as shown in the following example. [root@dhcp-10-26-1-207 ~]# cat /proc/1/smaps | grep KernelPageSize KernelPageSize 64 kB [root@dhcp-10-26-1-207 ~]# cat /tmp/test.c int main(int argc, char **argv) { const char *filename = TEST_XFS_FILENAME int fd = 0 void *buf = (void *)-1, *p int pgsize = getpagesize() int ret = 0 if (pgsize != 0x10000) { fprintf(stdout, System with 64KB base page size is required!\\n) return -EPERM } system(echo 0 > /sys/devices/virtual/bdi/2530/read_ahead_kb) system(echo 1 > /proc/sys/vm/drop_caches) /* Open the xfs file */ fd = open(filename, O_RDONLY) assert(fd > 0) /* Create VMA */ buf = mmap(NULL, TEST_MEM_SIZE, PROT_READ, MAP_SHARED, fd, 0) assert(buf != (void *)-1) fprintf(stdout, mapped buffer at 0x%p\\n, buf) /* Populate VMA */ ret = madvise(buf, TEST_MEM_SIZE, MADV_NOHUGEPAGE) assert(ret == 0) ret = madvise(buf, TEST_MEM_SIZE, MADV_POPULATE_READ) asse",
    "keyphrases": {
        "rootcause": "mm/huge_memory avoid PMD-size page cache if needed",
        "weakness": "",
        "impact": "512MB page cache is breaking the limitation",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "xarray"
    }
}
