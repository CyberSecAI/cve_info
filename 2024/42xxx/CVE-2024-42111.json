{
    "cveId": "CVE-2024-42111",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved btrfs always do the basic checks for btrfs_qgroup_inherit structure [BUG] Syzbot reports the following regression detected by KASAN BUG KASAN slab-out-of-bounds in btrfs_qgroup_inherit+0x42e/0x2e20 fs/btrfs/qgroup.c3277 Read of size 8 at addr ffff88814628ca50 by task syz-executor318/5171 CPU 0 PID 5171 Comm syz-executor318 Not tainted 6.10.0-rc2-syzkaller-00010-g2ab795141095 #0 Hardware name Google Google Compute Engine/Google Compute Engine, BIOS Google 04/02/2024 Call Trace __dump_stack lib/dump_stack.c88 [inline] dump_stack_lvl+0x241/0x360 lib/dump_stack.c114 print_address_description mm/kasan/report.c377 [inline] print_report+0x169/0x550 mm/kasan/report.c488 kasan_report+0x143/0x180 mm/kasan/report.c601 btrfs_qgroup_inherit+0x42e/0x2e20 fs/btrfs/qgroup.c3277 create_pending_snapshot+0x1359/0x29b0 fs/btrfs/transaction.c1854 create_pending_snapshots+0x195/0x1d0 fs/btrfs/transaction.c1922 btrfs_commit_transaction+0xf20/0x3740 fs/btrfs/transaction.c2382 create_snapshot+0x6a1/0x9e0 fs/btrfs/ioctl.c875 btrfs_mksubvol+0x58f/0x710 fs/btrfs/ioctl.c1029 btrfs_mksnapshot+0xb5/0xf0 fs/btrfs/ioctl.c1075 __btrfs_ioctl_snap_create+0x387/0x4b0 fs/btrfs/ioctl.c1340 btrfs_ioctl_snap_create_v2+0x1f2/0x3a0 fs/btrfs/ioctl.c1422 btrfs_ioctl+0x99e/0xc60 vfs_ioctl fs/ioctl.c51 [inline] __do_sys_ioctl fs/ioctl.c907 [inline] __se_sys_ioctl+0xfc/0x170 fs/ioctl.c893 do_syscall_x64 arch/x86/entry/common.c52 [inline] do_syscall_64+0xf3/0x230 arch/x86/entry/common.c83 entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP 00330x7fcbf1992509 RSP 002b00007fcbf1928218 EFLAGS 00000246 ORIG_RAX 0000000000000010 RAX ffffffffffffffda RBX 00007fcbf1a1f618 RCX 00007fcbf1992509 RDX 0000000020000280 RSI 0000000050009417 RDI 0000000000000003 RBP 00007fcbf1a1f610 R08 00007ffea1298e97 R09 0000000000000000 R10 0000000000000000 R11 0000000000000246 R12 00007fcbf19eb660 R13 00000000200002b8 R14 00007fcbf19e60c0 R15 0030656c69662f2e And it also pinned it down to commit b5357cb268c4 (btrfs qgroup do not check qgroup inherit if qgroup is disabled). [CAUSE] That offending commit skips the whole qgroup inherit check if qgroup is not enabled. But that also skips the very basic checks like num_ref_copies/num_excl_copies and the structure size checks. Meaning if a qgroup enable/disable race is happening at the background, and we pass a btrfs_qgroup_inherit structure when the qgroup is disabled, the check would be completely skipped. Then at the time of transaction commitment, qgroup is re-enabled and btrfs_qgroup_inherit() is going to use the incorrect structure and causing the above KASAN error. [FIX] Make btrfs_qgroup_check_inherit() only skip the source qgroup checks. So that even if invalid btrfs_qgroup_inherit structure is passed in, we can still reject invalid ones no matter if qgroup is enabled or not. Furthermore we do already have an extra safety inside btrfs_qgroup_inherit(), which would just ignore invalid qgroup sources, so even if we only skip the qgroup source check were still safe.",
    "keyphrases": {
        "rootcause": "race condition between enabling and disabling qgroup",
        "weakness": "",
        "impact": "slab-out-of-bounds",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "6.10.0-rc2",
        "component": "btrfs_qgroup_inherit"
    }
}
