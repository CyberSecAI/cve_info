{
    "cveId": "CVE-2024-42243",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm/filemap make MAX_PAGECACHE_ORDER acceptable to xarray Patch series mm/filemap Limit page cache size to that supported by xarray, v2. Currently, xarray cant support arbitrary page cache size. More details can be found from the WARN_ON() statement in xas_split_alloc(). In our test whose code is attached below, we hit the WARN_ON() on ARM64 system where the base page size is 64KB and huge page size is 512MB. The issue was reported long time ago and some discussions on it can be found here [1]. [1] https//www.spinics.net/lists/linux-xfs/msg75404.html In order to fix the issue, we need to adjust MAX_PAGECACHE_ORDER to one supported by xarray and avoid PMD-sized page cache if needed. The code changes are suggested by David Hildenbrand. PATCH[1] adjusts MAX_PAGECACHE_ORDER to that supported by xarray PATCH[2-3] avoids PMD-sized page cache in the synchronous readahead path PATCH[4] avoids PMD-sized page cache for shmem files if needed Test program ============ # cat test.c #define _GNU_SOURCE #include #include #include #include #include #include #include #include #define TEST_XFS_FILENAME/tmp/data #define TEST_SHMEM_FILENAME/dev/shm/data #define TEST_MEM_SIZE0x20000000 int main(int argc, char **argv) { const char *filename int fd = 0 void *buf = (void *)-1, *p int pgsize = getpagesize() int ret",
    "keyphrases": {
        "rootcause": "mm/filemap make MAX_PAGECACHE_ORDER acceptable to xarray",
        "weakness": "",
        "impact": "hit the WARN_ON() on ARM64 system",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
