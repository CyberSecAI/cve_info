{
    "cveId": "CVE-2024-42096",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved x86 stop playing stack games in profile_pc() The profile_pc() function is used for timer-based profiling, which isnt really all that relevant any more to begin with, but it also ends up making assumptions based on the stack layout that arent necessarily valid. Basically, the code tries to account the time spent in spinlocks to the caller rather than the spinlock, and while I support that as a concept, its not worth the code complexity or the KASAN warnings when no serious profiling is done using timers anyway these days. And the code really does depend on stack layout that is only true in the simplest of cases. Weve lost the comment at some point (I think when the 32-bit and 64-bit code was unified), but it used to say Assume the lock function has either no stack frame or a copy of eflags from PUSHF. which explains why it just blindly loads a word or two straight off the stack pointer and then takes a minimal look at the values to just check if they might be eflags or the return pc Eflags always has bits 22 and up cleared unlike kernel addresses but that basic stack layout assumption assumes that there isnt any lock debugging etc going on that would complicate the code and cause a stack frame. It causes KASAN unhappiness reported for years by syzkaller [1] and others [2]. With no real practical reason for this any more, just remove the code. Just for historical interest, heres some back",
    "keyphrases": {
        "rootcause": "assumptions based on the stack layout",
        "weakness": "",
        "impact": "",
        "vector": "KASAN warnings",
        "attacker": "syzkaller [1] and others [2]",
        "product": "Linux kernel",
        "version": "",
        "component": "profile_pc() function"
    }
}
