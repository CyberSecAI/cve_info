{
  "cveId": "CVE-2024-56673",
  "version": "1.0.0",
  "timestamp": "2025-07-04T16:12:41.853043+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved riscv mm Do not call pmd dtor on vmemmap page table teardown The vmemmaps, which is used for RV64 with SPARSEMEM_VMEMMAP, page tables are populated using pmd (page middle directory) hugetables. However, the pmd allocation is not using the generic mechanism used by the VMA code (e.g. pmd_alloc()), or the RISC-V specific create_pgd_mapping()/alloc_pmd_late(). Instead, the vmemmap page table code allocates a page, and calls vmemmap_set_pmd(). This results in that the pmd ctor is *not* called, nor would it make sense to do so. Now, when tearing down a vmemmap page table pmd, the cleanup code would unconditionally, and incorrectly call the pmd dtor, which results in a crash (best case). This issue was found when running the HMM selftests | tools/testing/selftests/mm# ./test_hmm.sh smoke | ... # when unloading the test_hmm.ko module | page refcount1 mapcount0 mapping0000000000000000 index0x0 pfn0x10915b | flags 0x1000000000000000(node=0|zone=1) | raw 1000000000000000 0000000000000000 dead000000000122 0000000000000000 | raw 0000000000000000 0000000000000000 00000001ffffffff 0000000000000000 | page dumped because VM_BUG_ON_PAGE(ptdesc->pmd_huge_pte) | ------------[ cut here ]------------ | kernel BUG at include/linux/mm.h3080! | Kernel BUG",
  "keyphrases": {
    "rootcause": "",
    "weakness": "",
    "impact": [
      "kernel BUG",
      "crash"
    ],
    "vector": "",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "RISCV mm"
  },
  "mitreTechnicalImpacts": []
}