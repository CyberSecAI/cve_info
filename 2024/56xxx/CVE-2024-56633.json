{
    "cveId": "CVE-2024-56633",
    "version": "1.0.0",
    "timestamp": "2025-07-04T16:12:41.853043+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved tcp_bpf Fix the sk_mem_uncharge logic in tcp_bpf_sendmsg The current sk memory accounting logic in __SK_REDIRECT is pre-uncharging tosend bytes, which is either msg->sg.size or a smaller value apply_bytes. Potential problems with this strategy are as follows - If the actual sent bytes are smaller than tosend, we need to charge some bytes back, as in line 487, which is okay but seems not clean. - When tosend is set to apply_bytes, as in line 417, and (ret sg.size - apply_bytes) bytes. [...] 415 tosend = msg->sg.size 416 if (psock->apply_bytes && psock->apply_bytes apply_bytes [...] 443 sk_msg_return(sk, msg, tosend) 444 release_sock(sk) 446 origsize = msg->sg.size 447 ret = tcp_bpf_sendmsg_redir(sk_redir, redir_ingress, 448 msg, tosend, flags) 449 sent = origsize - msg->sg.size [...] 454 lock_sock(sk) 455 if (unlikely(ret ? __warn+0x89/0x130 ? inet_sock_destruct+0x190/0x1a0 ? report_bug+0xfc/0x1e0 ? handle_bug+0x5c/0xa0 ? exc_invalid_op+0x17/0x70 ? asm_exc_invalid_op+0x1a/0x20 ? inet_sock_destruct+0x190/0x1a0 __sk_destruct+0x25/0x220 sk_psock_destroy+0x2b2/0x310 process_scheduled_works+0xa3/0x3e0 worker_thread+0x117/0x240 ? __pfx_worker_thread+0x10/0x10 kthread+0xcf/0x100 ? __pfx_kthread+0x10/0x10 ret_from_fork+0x31/0x40 ? __pfx_kthread+0x10/0x10 ret_from_fork_asm+0x1a/0x30 ---[ end trace 0000000000000000 ]--- In __SK_REDIRECT, a more concise way is delaying the uncharging after sent bytes are finalized, and uncharge this value. When (ret sg.size - apply_bytes) bytes. The same warning will be reported in selftest. [...] 468 case __SK_DROP 469 default 470 sk_msg_free_partial(sk, msg, tosend) 471 sk_msg_apply_bytes(psock, tosend) 472 *copied -= (tosend + delta) 473 return -EACCES [...] So instead of sk_msg_free_partial we can do sk_msg_free here.",
    "keyphrases": {
        "rootcause": "pre-uncharging tosend bytes",
        "weakness": "sk memory accounting logic in __SK_REDIRECT",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "tcp_bpf_sendmsg"
    }
}
