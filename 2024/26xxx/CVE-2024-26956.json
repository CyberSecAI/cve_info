{
    "cveId": "CVE-2024-26956",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved nilfs2 fix failure to detect DAT corruption in btree and direct mappings Patch series nilfs2 fix kernel bug at submit_bh_wbc(). This resolves a kernel BUG reported by syzbot. Since there are two flaws involved, Ive made each one a separate patch. The first patch alone resolves the syzbot-reported bug, but I think both fixes should be sent to stable, so Ive tagged them as such. This patch (of 2) Syzbot has reported a kernel bug in submit_bh_wbc() when writing file data to a nilfs2 file system whose metadata is corrupted. There are two flaws involved in this issue. The first flaw is that when nilfs_get_block() locates a data block using btree or direct mapping, if the disk address translation routine nilfs_dat_translate() fails with internal code -ENOENT due to DAT metadata corruption, it can be passed back to nilfs_get_block(). This causes nilfs_get_block() to misidentify an existing block as non-existent, causing both data block lookup and insertion to fail inconsistently. The second flaw is that nilfs_get_block() returns a successful status in this inconsistent state. This causes the caller __block_write_begin_int() or others to request a read even though the buffer is not mapped, resulting in a BUG_ON check for the BH_Mapped flag in submit_bh_wbc() failing. This fixes the first issue by changing the return value to code -EINVAL when a conversion using DAT fails with code -ENOENT, avoidi",
    "keyphrases": {
        "rootcause": "BUG_ON check for the BH_Mapped flag in submit_bh_wbc() failing",
        "weakness": "",
        "impact": "",
        "vector": "corrupted nilfs2 metadata",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "nilfs2"
    }
}
