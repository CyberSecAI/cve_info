{
    "cveId": "CVE-2024-26998",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved serial core Clearing the circular buffer before NULLifying it The circular buffer is NULLified in uart_tty_port_shutdown() under the spin lock. However, the PM or other timer based callbacks may still trigger after this event without knowning that buffer pointer is not valid. Since the serial code is a bit inconsistent in checking the buffer state (some rely on the head-tail positions, some on the buffer pointer), its better to have both aligned, i.e. buffer pointer to be NULL and head-tail possitions to be the same, meaning its empty. This will prevent asynchronous calls to dereference NULL pointer as reported recently in 8250 case BUG kernel NULL pointer dereference, address 00000cf5 Workqueue pm pm_runtime_work EIP serial8250_tx_chars (drivers/tty/serial/8250/8250_port.c1809) ... ? serial8250_tx_chars (drivers/tty/serial/8250/8250_port.c1809) __start_tx (drivers/tty/serial/8250/8250_port.c1551) serial8250_start_tx (drivers/tty/serial/8250/8250_port.c1654) serial_port_runtime_suspend (include/linux/serial_core.h667 drivers/tty/serial/serial_port.c63) __rpm_callback (drivers/base/power/runtime.c393) ? serial_port_remove (drivers/tty/serial/serial_port.c50) rpm_suspend (drivers/base/power/runtime.c447) The proposed change will prevent ->start_tx() to be called during suspend on shut down port.",
    "keyphrases": {
        "rootcause": "inconsistent buffer state checking",
        "weakness": "NULL pointer dereference",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "serial core"
    }
}
