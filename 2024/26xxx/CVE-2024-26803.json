{
    "cveId": "CVE-2024-26803",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved net veth clear GRO when clearing XDP even when down veth sets NETIF_F_GRO automatically when XDP is enabled, because both features use the same NAPI machinery. The logic to clear NETIF_F_GRO sits in veth_disable_xdp() which is called both on ndo_stop and when XDP is turned off. To avoid the flag from being cleared when the device is brought down, the clearing is skipped when IFF_UP is not set. Bringing the device down should indeed not modify its features. Unfortunately, this means that clearing is also skipped when XDP is disabled _while_ the device is down. And theres nothing on the open path to bring the device features back into sync. IOW if user enables XDP, disables it and then brings the device up well end up with a stray GRO flag set but no NAPI instances. We dont depend on the GRO flag on the datapath, so the datapath wont crash. We will crash (or hang), however, next time features are synced (either by user via ethtool or peer changing its config). The GRO flag will go away, and veth will try to disable the NAPIs. But the open path never created them since XDP was off, the GRO flag was a stray. If NAPI was initialized before well hang in napi_disable(). If it never was well crash trying to stop uninitialized hrtimer. Move the GRO flag updates to the XDP enable / disable paths, instead of mixing them with the ndo_open / ndo_close paths.",
    "keyphrases": {
        "rootcause": "improper clearing of the NETIF_F_GRO flag when XDP is disabled",
        "weakness": "",
        "impact": "crash or hang",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
