{
    "cveId": "CVE-2024-26781",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mptcp fix possible deadlock in subflow diag Syzbot and Eric reported a lockdep splat in the subflow diag WARNING possible circular locking dependency detected 6.8.0-rc4-syzkaller-00212-g40b9385dd8e6 #0 Not tainted syz-executor.2/24141 is trying to acquire lock ffff888045870130 (k-sk_lock-AF_INET6){+.+.}-{00}, at tcp_diag_put_ulp net/ipv4/tcp_diag.c100 [inline] ffff888045870130 (k-sk_lock-AF_INET6){+.+.}-{00}, at tcp_diag_get_aux+0x738/0x830 net/ipv4/tcp_diag.c137 but task is already holding lock ffffc9000135e488 (&h->lhash2[i].lock){+.+.}-{22}, at spin_lock include/linux/spinlock.h351 [inline] ffffc9000135e488 (&h->lhash2[i].lock){+.+.}-{22}, at inet_diag_dump_icsk+0x39f/0x1f80 net/ipv4/inet_diag.c1038 which lock already depends on the new lock. the existing dependency chain (in reverse order) is -> #1 (&h->lhash2[i].lock){+.+.}-{22} lock_acquire+0x1e3/0x530 kernel/locking/lockdep.c5754 __raw_spin_lock include/linux/spinlock_api_smp.h133 [inline] _raw_spin_lock+0x2e/0x40 kernel/locking/spinlock.c154 spin_lock include/linux/spinlock.h351 [inline] __inet_hash+0x335/0xbe0 net/ipv4/inet_hashtables.c743 inet_csk_listen_start+0x23a/0x320 net/ipv4/inet_connection_sock.c1261 __inet_listen_sk+0x2a2/0x770 net/ipv4/af_inet.c217 inet_listen+0xa3/0x110 net/ipv4/af_inet.c239 rds_tcp_listen_init+0x3fd/0x5a0 net/rds/tc"
}
