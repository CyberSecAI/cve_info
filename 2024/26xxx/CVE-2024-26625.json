{
    "cveId": "CVE-2024-26625",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved llc call sock_orphan() at release time syzbot reported an interesting trace [1] caused by a stale sk->sk_wq pointer in a closed llc socket. In commit ff7b11aa481f (net socket set sock->sk to NULL after calling proto_opsrelease()) Eric Biggers hinted that some protocols are missing a sock_orphan(), we need to perform a full audit. In net-next, I plan to clear sock->sk from sock_orphan() and amend Eric patch to add a warning. [1] BUG KASAN slab-use-after-free in list_empty include/linux/list.h373 [inline] BUG KASAN slab-use-after-free in waitqueue_active include/linux/wait.h127 [inline] BUG KASAN slab-use-after-free in sock_def_write_space_wfree net/core/sock.c3384 [inline] BUG KASAN slab-use-after-free in sock_wfree+0x9a8/0x9d0 net/core/sock.c2468 Read of size 8 at addr ffff88802f4fc880 by task ksoftirqd/1/27 CPU 1 PID 27 Comm ksoftirqd/1 Not tainted 6.8.0-rc1-syzkaller-00049-g6098d87eaf31 #0 Hardware name QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-debian-1.16.2-1 04/01/2014 Call Trace __dump_stack lib/dump_stack.c88 [inline] dump_stack_lvl+0xd9/0x1b0 lib/dump_stack.c106 print_address_description mm/kasan/report.c377 [inline] print_report+0xc4/0x620 mm/kasan/report.c488 kasan_report+0xda/0x110 mm/kasan/report.c601 list_empty include/linux/list.h373 [inline] waitqueue_active include/linux/wait.h127 [inline] sock_def_write_space_wfree net/cor",
    "keyphrases": {
        "rootcause": "stale sk->sk_wq pointer",
        "weakness": "slab-use-after-free",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
