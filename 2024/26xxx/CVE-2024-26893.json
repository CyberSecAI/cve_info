{
    "cveId": "CVE-2024-26893",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved firmware arm_scmi Fix double free in SMC transport cleanup path When the generic SCMI code tears down a channel, it calls the chan_free callback function, defined by each transport. Since multiple protocols might share the same transport_info member, chan_free() might want to clean up the same member multiple times within the given SCMI transport implementation. In this case, it is SMC transport. This will lead to a NULL pointer dereference at the second time | scmi_protocol scmi_dev.1 Enabled polling mode TX channel - prot_id16 | arm-scmi firmwarescmi SCMI Notifications - Core Enabled. | arm-scmi firmwarescmi unable to communicate with SCMI | Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000 | Mem abort info | ESR = 0x0000000096000004 | EC = 0x25 DABT (current EL), IL = 32 bits | SET = 0, FnV = 0 | EA = 0, S1PTW = 0 | FSC = 0x04 level 0 translation fault | Data abort info | ISV = 0, ISS = 0x00000004, ISS2 = 0x00000000 | CM = 0, WnR = 0, TnD = 0, TagAccess = 0 | GCS = 0, Overlay = 0, DirtyBit = 0, Xs = 0 | user pgtable 4k pages, 48-bit VAs, pgdp=0000000881ef8000 | [0000000000000000] pgd=0000000000000000, p4d=0000000000000000 | Internal error Oops 0000000096000004 [#1] PREEMPT SMP | Modules linked in | CPU 4 PID 1 Comm swapper/0 Not tainted 6.7.0-rc2-00124-g455ef",
    "keyphrases": {
        "rootcause": "double free",
        "weakness": "NULL pointer dereference",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "firmware arm_scmi Fix double free in SMC transport cleanup path"
    }
}
