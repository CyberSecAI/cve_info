{
    "cveId": "CVE-2024-26802",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved stmmac Clear variable when destroying workqueue Currently when suspending driver and stopping workqueue it is checked whether workqueue is not NULL and if so, it is destroyed. Function destroy_workqueue() does drain queue and does clear variable, but it does not set workqueue variable to NULL. This can cause kernel/module panic if code attempts to clear workqueue that was not initialized. This scenario is possible when resuming suspended driver in stmmac_resume(), because there is no handling for failed stmmac_hw_setup(), which can fail and return if DMA engine has failed to initialize, and workqueue is initialized after DMA engine. Should DMA engine fail to initialize, resume will proceed normally, but interface wont work and TX queue will eventually timeout, causing Reset adapter error. This then does destroy workqueue during reset process. And since workqueue is initialized after DMA engine and can be skipped, it will cause kernel/module panic. To secure against this possible crash, set workqueue variable to NULL when destroying workqueue. Log/backtrace from crash goes as follows [88.031977]------------[ cut here ]------------ [88.031985]NETDEV WATCHDOG eth0 (sxgmac) transmit queue 1 timed out [88.032017]WARNING CPU 0 PID 0 at net/sched/sch_generic.c477 dev_watchdog+0x390/0x398 [88.032251]---[ end trace e70de432e4d5c2c0 ]--- [88.032282]sx",
    "keyphrases": {
        "rootcause": "improper workqueue destruction",
        "weakness": "",
        "impact": "kernel/module panic",
        "vector": "suspending driver and stopping workqueue",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "stmmac driver"
    }
}
