{
  "cveId": "CVE-2024-26688",
  "version": "1.0.0",
  "timestamp": "2024-12-06T11:32:07.789868+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved fs,hugetlb fix NULL pointer dereference in hugetlbs_fill_super When configuring a hugetlb filesystem via the fsconfig() syscall, there is a possible NULL dereference in hugetlbfs_fill_super() caused by assigning NULL to ctx->hstate in hugetlbfs_parse_param() when the requested pagesize is non valid. E.g Taking the following steps fd = fsopen(hugetlbfs, FSOPEN_CLOEXEC) fsconfig(fd, FSCONFIG_SET_STRING, pagesize, 1024, 0) fsconfig(fd, FSCONFIG_CMD_CREATE, NULL, NULL, 0) Given that the requested pagesize is invalid, ctxt->hstate will be replaced with NULL, losing its previous value, and we will print an error ... ... case Opt_pagesize ps = memparse(param->string, &rest) ctx->hstate = h if (!ctx->hstate) { pr_err(Unsupported page size %lu MB\\n, ps / SZ_1M) return -EINVAL } return 0 ... ... This is a problem because later on, we will dereference ctxt->hstate in hugetlbfs_fill_super() ... ... sb->s_blocksize = huge_page_size(ctx->hstate) ... ... Causing below Oops. Fix this by replacing cxt->hstate value only when then pagesize is known to be valid. kernel hugetlbfs Unsupported page size 0 MB kernel BUG kernel NULL pointer dereference, address 0000000000000028 kernel #PF supervisor read access in kernel mode kernel #PF error_code(0x0000) - not-present page kernel PGD 800000010f66c067 P4D 800000010f66c067 PUD 1b22f8067",
  "keyphrases": {
    "rootcause": [
      "NULL assignment to ctx->hstate",
      "NULL dereference"
    ],
    "weakness": "NULL pointer dereference",
    "impact": [
      "Oops - kernel NULL pointer dereference",
      "kernel BUG",
      "read access"
    ],
    "vector": "invalid pagesize in fsconfig()",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "hugetlbfs_fill_super()"
  },
  "mitreTechnicalImpacts": []
}