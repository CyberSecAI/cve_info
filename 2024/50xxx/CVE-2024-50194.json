{
    "cveId": "CVE-2024-50194",
    "version": "1.0.0",
    "timestamp": "2024-12-19T22:22:49.126128+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved arm64 probes Fix uprobes for big-endian kernels The arm64 uprobes code is broken for big-endian kernels as it doesnt convert the in-memory instruction encoding (which is always little-endian) into the kernels native endianness before analyzing and simulating instructions. This may result in a few distinct problems * The kernel may may erroneously reject probing an instruction which can safely be probed. * The kernel may erroneously erroneously permit stepping an instruction out-of-line when that instruction cannot be stepped out-of-line safely. * The kernel may erroneously simulate instruction incorrectly dur to interpretting the byte-swapped encoding. The endianness mismatch isnt caught by the compiler or sparse because * The arch_uprobe{insn,ixol} fields are encoded as arrays of u8, so the compiler and sparse have no idea these contain a little-endian 32-bit value. The core uprobes code populates these with a memcpy() which similarly does not handle endianness. * While the uprobe_opcode_t type is an alias for __le32, both arch_uprobe_analyze_insn() and arch_uprobe_skip_sstep() cast from u8[] to the similarly-named probe_opcode_t, which is an alias for u32. Hence there is no endianness conversion warning. Fix this by changing the arch_uprobe{insn,ixol} fields to __le32 and adding the appropriate __le32_to_cpu() conversions prior to consuming the instruction encoding. The core uprobes copies these fields as opaque ranges of bytes, and so is unaffected by this change. At the same time, remove MAX_UINSN_BYTES and consistently use AARCH64_INSN_SIZE for clarity. Tested with the following | #include | #include | | #define noinline __attribute__((noinline)) | | static noinline void *adrp_self(void) | { | void *addr | | asm volatile( | adrp %x0, adrp_self\\n | add %x0, %x0, lo12adrp_self\\n | =r (addr)) | } | | | int main(int argc, char *argv) | { | void *ptr = adrp_self() | bool equal = (ptr == adrp_self) | | printf(adrp_self => %p\\n | adrp_self() => %p\\n | %s\\n, | adrp_self, ptr, equal ? EQUAL NOT EQUAL) | | return 0 | } .... where the adrp_self() function was compiled to | 00000000004007e0 | 4007e0 90000000 adrp x0, 400000 | 4007e4 911f8000 add x0, x0, #0x7e0 | 4007e8 d65f03c0 ret Before this patch, the ADRP is not recognized, and is assumed to be steppable, resulting in corruption of the result | # ./adrp-self | adrp_self => 0x4007e0 | adrp_self() => 0x4007e0 | EQUAL | # echo p /root/adrp-self0x007e0 > /sys/kernel/tracing/uprobe_events | # echo 1 > /sys/kernel/tracing/events/uprobes/enable | # ./adrp-self | adrp_self => 0x4007e0 | adrp_self() => 0xffffffffff7e0 | NOT EQUAL After this patch, the ADRP is correctly recognized and simulated | # ./adrp-self | adrp_self => 0x4007e0 | adrp_self() => 0x4007e0 | EQUAL | # | # echo p /root/adrp-self0x007e0 > /sys/kernel/tracing/uprobe_events | # echo 1 > /sys/kernel/tracing/events/uprobes/enable | # ./adrp-self | adrp_self => 0x4007e0 | adrp_self() => 0x4007e0 | EQUAL",
    "keyphrases": {
        "rootcause": "The arm64 uprobes code does not convert the in-memory instruction encoding (which is always little-endian) into the kernel's native endianness before analyzing and simulating instructions.",
        "weakness": "The arch_uprobe{insn,ixol} fields are encoded as arrays of u8, so the compiler and sparse have no idea these contain a little-endian 32-bit value. The core uprobes code populates these with a memcpy() which similarly does not handle endianness. Also, the uprobe_opcode_t type is an alias for __le32, but arch_uprobe_analyze_insn() and arch_uprobe_skip_sstep() cast from u8[] to the similarly-named probe_opcode_t, which is an alias for u32, thus avoiding any endianness conversion warnings.",
        "impact": "The kernel may erroneously reject probing an instruction which can safely be probed. The kernel may erroneously permit stepping an instruction out-of-line when that instruction cannot be stepped out-of-line safely. The kernel may erroneously simulate instruction incorrectly due to interpreting the byte-swapped encoding.",
        "vector": "The vulnerability is triggered when the kernel attempts to analyze and simulate instructions for uprobes on big-endian arm64 kernels.",
        "attacker": "An attacker could exploit this by crafting specific instructions that would cause the kernel to behave unexpectedly. This can lead to incorrect uprobe analysis, simulation, and stepping, possibly leading to unexpected behavior or information disclosure.",
        "product": "Linux Kernel",
        "version": "Not specified, but affects big-endian arm64 kernels",
        "component": "arm64 uprobes code"
    }
}
