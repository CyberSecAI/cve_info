{
    "cveId": "CVE-2024-50010",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved exec dont WARN for racy path_noexec check Both i_mode and noexec checks wrapped in WARN_ON stem from an artifact of the previous implementation. They used to legitimately check for the condition, but that got moved up in two commits 633fb6ac3980 (exec move S_ISREG() check earlier) 0fd338b2d2cd (exec move path_noexec() check earlier) Instead of being removed said checks are WARN_ONed instead, which has some debug value. However, the spurious path_noexec check is racy, resulting in unwarranted warnings should someone race with setting the noexec flag. One can note there is more to perm-checking whether execve is allowed and none of the conditions are guaranteed to still hold after they were tested for. Additionally this does not validate whether the code path did any perm checking to begin with -- it will pass if the inode happens to be regular. Keep the redundant path_noexec() check even though its mindless nonsense checking for guarantee that isnt given so drop the WARN. Reword the commentary and do small tidy ups while here. [brauner keep redundant path_noexec() check]",
    "keyphrases": {
        "rootcause": "racy path_noexec check",
        "weakness": "",
        "impact": "unwarranted warnings",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
