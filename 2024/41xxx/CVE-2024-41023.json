{
  "cveId": "CVE-2024-41023",
  "version": "1.0.0",
  "timestamp": "2024-12-06T11:32:07.789868+00:00",
  "description": "In the Linux kernel, the following vulnerability has been resolved sched/deadline Fix task_struct reference leak During the execution of the following stress test with linux-rt stress-ng --cyclic 30 --timeout 30 --minimize --quiet kmemleak frequently reported a memory leak concerning the task_struct unreferenced object 0xffff8881305b8000 (size 16136) comm stress-ng, pid 614, jiffies 4294883961 (age 286.412s) object hex dump (first 32 bytes) 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 .@.............. 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ debug hex dump (first 16 bytes) 53 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 S............... backtrace [] dup_task_struct+0x30/0x540 [] copy_process+0x3d9/0x50e0 [] kernel_clone+0xb0/0x770 [] __do_sys_clone+0xb6/0xf0 [] do_syscall_64+0x5d/0xf0 [] entry_SYSCALL_64_after_hwframe+0x6e/0x76 The issue occurs in start_dl_timer(), which increments the task_struct reference count and sets a timer. The timer callback, dl_task_timer, is supposed to decrement the reference count upon expiration. However, if enqueue_task_dl() is called before the timer expires and cancels it, the reference count is not decremented, leading to the leak. This patch fixes the reference leak by ensuring the task_struct reference count is properly decremented when the time",
  "keyphrases": {
    "rootcause": "improper reference count management",
    "weakness": "memory leak",
    "impact": "task_struct memory leak",
    "vector": "stress-ng with specific settings",
    "attacker": "",
    "product": "Linux kernel",
    "version": "",
    "component": "sched/deadline"
  },
  "mitreTechnicalImpacts": []
}