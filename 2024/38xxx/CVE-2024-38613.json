{
    "cveId": "CVE-2024-38613",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved m68k Fix spinlock race in kernel thread creation Context switching does take care to retain the correct lock owner across the switch from prev to next tasks. This does rely on interrupts remaining disabled for the entire duration of the switch. This condition is guaranteed for normal process creation and context switching between already running processes, because both prev and next already have interrupts disabled in their saved copies of the status register. The situation is different for newly created kernel threads. The status register is set to PS_S in copy_thread(), which does leave the IPL at 0. Upon restoring the next threads status register in switch_to() aka resume(), interrupts then become enabled prematurely. resume() then returns via ret_from_kernel_thread() and schedule_tail() where run queue lock is released (see finish_task_switch() and finish_lock_switch()). A timer interrupt calling scheduler_tick() before the lock is released in finish_task_switch() will find the lock already taken, with the current task as lock owner. This causes a spinlock recursion warning as reported by Guenter Roeck. As far as I can ascertain, this race has been opened in commit 533e6903bea0 (m68k split ret_from_fork(), simplify kernel_thread()) but I havent done a detailed study of kernel history so it may well predate that commit. Interrupts cannot be disabled in the saved status register c",
    "keyphrases": {
        "rootcause": "spinlock race",
        "weakness": "",
        "impact": "spinlock recursion",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "kernel thread creation"
    }
}
