{
    "cveId": "CVE-2024-43897",
    "version": "1.0.0",
    "timestamp": "2024-12-18T22:42:50.929578+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolvednet drop bad gso csum_start and offset in virtio_net_hdrTighten csum_start and csum_offset checks in virtio_net_hdr_to_skbfor GSO packets.The function already checks that a checksum requested withVIRTIO_NET_HDR_F_NEEDS_CSUM is in skb linear. But for GSO packetsthis might not hold for segs after segmentation.Syzkaller demonstrated to reach this warning in skb_checksum_help offset = skb_checksum_start_offset(skb) ret = -EINVAL if (WARN_ON_ONCE(offset >= skb_headlen(skb)))By injecting a TSO packetWARNING CPU 1 PID 3539 at net/core/dev.c3284 skb_checksum_help+0x3d0/0x5b0 ip_do_fragment+0x209/0x1b20 net/ipv4/ip_output.c774 ip_finish_output_gso net/ipv4/ip_output.c279 [inline] __ip_finish_output+0x2bd/0x4b0 net/ipv4/ip_output.c301 iptunnel_xmit+0x50c/0x930 net/ipv4/ip_tunnel_core.c82 ip_tunnel_xmit+0x2296/0x2c70 net/ipv4/ip_tunnel.c813 __gre_xmit net/ipv4/ip_gre.c469 [inline] ipgre_xmit+0x759/0xa60 net/ipv4/ip_gre.c661 __netdev_start_xmit include/linux/netdevice.h4850 [inline] netdev_start_xmit include/linux/netdevice.h4864 [inline] xmit_one net/core/dev.c3595 [inline] dev_hard_start_xmit+0x261/0x8c0 net/core/dev.c3611 __dev_queue_xmit+0x1b97/0x3c90 net/core/dev.c4261 packet_snd net/packet/af_packet.c3073 [inline]The geometry of the bad input packet at tcp_gso_segment[ 52.003050][ T8403] skb len=12202 headroom=244 headlen=12093 tailroom=0[ 52.003050][ T8403] mac=(168,24) mac_len=24 net=(192,52) trans=244[ 52.003050][ T8403] shinfo(txflags=0 nr_frags=1 gso(size=1552 type=3 segs=0))[ 52.003050][ T8403] csum(0x60000c7 start=199 offset=1536ip_summed=3 complete_sw=0 valid=0 level=0)Mitigate with stricter input validation.csum_offset for GSO packets, deduce the correct value from gso_type.This is already done for USO. Extend it to TSO. Let UFO beudp[46]_ufo_fragment ignores these fields and always computes thechecksum in software.csum_start finding the real offset requires parsing to the transportheader. Do not add a parser, use existing segmentation parsing. Thanksto SKB_GSO_DODGY, that also catches bad packets that are hw offloaded.Again test both TSO and USO. Do not test UFO for the above reason, anddo not test UDP tunnel offload.GSO packet are almost always CHECKSUM_PARTIAL. USO packets may beCHECKSUM_NONE since commit 10154dbded6d6 (udp Allow GSO transmitfrom devices with no checksum offload), but then still these fieldsare initialized correctly in udp4_hwcsum/udp6_hwcsum_outgoing. So noneed to test for ip_summed == CHECKSUM_PARTIAL first.This revises an existing fix mentioned in the Fixes tag, which brokesmall packets with GSO offload, as detected by kselftests.",
    "keyphrases": {
        "rootcause": "improper csum_start and csum_offset checks",
        "weakness": "",
        "impact": "crash",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "virtio_net_hdr"
    }
}
