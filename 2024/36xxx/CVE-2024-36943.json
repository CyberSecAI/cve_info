{
    "cveId": "CVE-2024-36943",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved fs/proc/task_mmu fix loss of young/dirty bits during pagemap scan make_uffd_wp_pte() was previously doing pte = ptep_get(ptep) ptep_modify_prot_start(ptep) pte = pte_mkuffd_wp(pte) ptep_modify_prot_commit(ptep, pte) But if another thread accessed or dirtied the pte between the first 2 calls, this could lead to loss of that information. Since ptep_modify_prot_start() gets and clears atomically, the following is the correct pattern and prevents any possible race. Any access after the first call would see an invalid pte and cause a fault pte = ptep_modify_prot_start(ptep) pte = pte_mkuffd_wp(pte) ptep_modify_prot_commit(ptep, pte)",
    "keyphrases": {
        "rootcause": "loss of young/dirty bits during pagemap scan",
        "weakness": "race condition",
        "impact": "loss of that information",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
