{
    "cveId": "CVE-2024-36938",
    "version": "1.0.0",
    "timestamp": "2024-12-19T22:22:49.126128+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolvedbpf, skmsg Fix NULL pointer dereference in sk_psock_skb_ingress_enqueueFix NULL pointer data-races in sk_psock_skb_ingress_enqueue() whichsyzbot reported [1].[1]BUG KCSAN data-race in sk_psock_drop / sk_psock_skb_ingress_enqueuewrite to 0xffff88814b3278b8 of 8 bytes by task 10724 on cpu 1 sk_psock_stop_verdict net/core/skmsg.c1257 [inline] sk_psock_drop+0x13e/0x1f0 net/core/skmsg.c843 sk_psock_put include/linux/skmsg.h459 [inline] sock_map_close+0x1a7/0x260 net/core/sock_map.c1648 unix_release+0x4b/0x80 net/unix/af_unix.c1048 __sock_release net/socket.c659 [inline] sock_close+0x68/0x150 net/socket.c1421 __fput+0x2c1/0x660 fs/file_table.c422 __fput_sync+0x44/0x60 fs/file_table.c507 __do_sys_close fs/open.c1556 [inline] __se_sys_close+0x101/0x1b0 fs/open.c1541 __x64_sys_close+0x1f/0x30 fs/open.c1541 do_syscall_64+0xd3/0x1d0 entry_SYSCALL_64_after_hwframe+0x6d/0x75read to 0xffff88814b3278b8 of 8 bytes by task 10713 on cpu 0 sk_psock_data_ready include/linux/skmsg.h464 [inline] sk_psock_skb_ingress_enqueue+0x32d/0x390 net/core/skmsg.c555 sk_psock_skb_ingress_self+0x185/0x1e0 net/core/skmsg.c606 sk_psock_verdict_apply net/core/skmsg.c1008 [inline] sk_psock_verdict_recv+0x3e4/0x4a0 net/core/skmsg.c1202 unix_read_skb net/unix/af_unix.c2546 [inline] unix_stream_read_skb+0x9e/0xf0 net/unix/af_unix.c2682 sk_psock_verdict_data_ready+0x77/0x220 net/core/skmsg.c1223 unix_stream_sendmsg+0x527/0x860 net/unix/af_unix.c2339 sock_sendmsg_nosec net/socket.c730 [inline] __sock_sendmsg+0x140/0x180 net/socket.c745 ____sys_sendmsg+0x312/0x410 net/socket.c2584 ___sys_sendmsg net/socket.c2638 [inline] __sys_sendmsg+0x1e9/0x280 net/socket.c2667 __do_sys_sendmsg net/socket.c2676 [inline] __se_sys_sendmsg net/socket.c2674 [inline] __x64_sys_sendmsg+0x46/0x50 net/socket.c2674 do_syscall_64+0xd3/0x1d0 entry_SYSCALL_64_after_hwframe+0x6d/0x75value changed 0xffffffff83d7feb0 -> 0x0000000000000000Reported by Kernel Concurrency Sanitizer onCPU 0 PID 10713 Comm syz-executor.4 Tainted G W 6.8.0-syzkaller-08951-gfe46a7dd189e #0Hardware name Google Google Compute Engine/Google Compute Engine, BIOS Google 02/29/2024Prior to this, commit 4cd12c6065df (bpf, sockmap Fix NULL pointerdereference in sk_psock_verdict_data_ready()) fixed one NULL pointersimilarly due to no protection of saved_data_ready. Here is anotherdifferent caller causing the same issue because of the same reason. Sowe should protect it with sk_callback_lock read lock because the writerside in the sk_psock_drop() uses write_lock_bh(&sk->sk_callback_lock).To avoid errors that could happen in future, I move those two pairs oflock into the sk_psock_data_ready(), which is suggested by John Fastabend.",
    "keyphrases": {
        "rootcause": "NULL pointer dereference in sk_psock_skb_ingress_enqueue due to lack of protection for saved_data_ready when accessed concurrently",
        "weakness": "Lack of proper locking mechanism when accessing `saved_data_ready`",
        "impact": "Kernel crash due to NULL pointer dereference",
        "vector": "Concurrent access to `saved_data_ready` from different execution contexts.",
        "attacker": "Unlikely to be a targeted attacker, this is caused by race condition",
        "product": "Linux Kernel",
        "version": "6.8.0-syzkaller-08951-gfe46a7dd189e and prior",
        "component": "bpf, skmsg"
    }
}
