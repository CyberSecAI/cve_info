{
    "cveId": "CVE-2024-46783",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved tcp_bpf fix return value of tcp_bpf_sendmsg() When we cork messages in psock->cork, the last message triggers the flushing will result in sending a sk_msg larger than the current message size. In this case, in tcp_bpf_send_verdict(), copied becomes negative at least in the following case 468 case __SK_DROP 469 default 470 sk_msg_free_partial(sk, msg, tosend) 471 sk_msg_apply_bytes(psock, tosend) 472 *copied -= (tosend + delta) // <==== HERE 473 return -EACCES Therefore, it could lead to the following BUG with a proper value of copied (thanks to syzbot). We should not use negative copied as a return value here. ------------[ cut here ]------------ kernel BUG at net/socket.c733! Internal error Oops - BUG 00000000f2000800 [#1] PREEMPT SMP Modules linked in CPU 0 UID 0 PID 3265 Comm syz-executor510 Not tainted 6.11.0-rc3-syzkaller-00060-gd07b43284ab3 #0 Hardware name linux,dummy-virt (DT) pstate 61400009 (nZCv daif +PAN -UAO -TCO +DIT -SSBS BTYPE=--) pc sock_sendmsg_nosec net/socket.c733 [inline] pc sock_sendmsg_nosec net/socket.c728 [inline] pc __sock_sendmsg+0x5c/0x60 net/socket.c745 lr sock_sendmsg_nosec net/socket.c730 [inline] lr __sock_sendmsg+0x54/0x60 net/socket.c745 sp ffff800088ea3b30 x29 ffff800088ea3b30 x28 fbf00000062bc900 x27 0000000000000000",
    "keyphrases": {
        "rootcause": "negative value in copied variable",
        "weakness": "use-after-free",
        "impact": "kernel BUG",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": ""
    }
}
