{
    "cveId": "CVE-2024-44973",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved mm, slub do not call do_slab_free for kfence object In 782f8906f805 the freeing of kfence objects was moved from deep inside do_slab_free to the wrapper functions outside. This is a nice change, but unfortunately it missed one spot in __kmem_cache_free_bulk. This results in a crash like this BUG skbuff_head_cache (Tainted G S B E ) Padding overwritten. 0xffff88907fea0f00-0xffff88907fea0fff @offset=3840 slab_err (mm/slub.c1129) free_to_partial_list (mm/slub.c? mm/slub.c4036) slab_pad_check (mm/slub.c864 mm/slub.c1290) check_slab (mm/slub.c?) free_to_partial_list (mm/slub.c3171 mm/slub.c4036) kmem_cache_alloc_bulk (mm/slub.c? mm/slub.c4495 mm/slub.c4586 mm/slub.c4635) napi_build_skb (net/core/skbuff.c348 net/core/skbuff.c527 net/core/skbuff.c549) All the other callers to do_slab_free appear to be ok. Add a kfence_free check in __kmem_cache_free_bulk to avoid the crash.",
    "keyphrases": {
        "rootcause": "missing freeing of kfence objects",
        "weakness": "",
        "impact": "crash",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "mm, slub"
    }
}
