{
    "cveId": "CVE-2024-49933",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved blk_iocost fix more out of bound shifts Recently running UBSAN caught few out of bound shifts in the ioc_forgive_debts() function UBSAN shift-out-of-bounds in block/blk-iocost.c214238 shift exponent 80 is too large for 64-bit type u64 (aka unsigned long long) ... UBSAN shift-out-of-bounds in block/blk-iocost.c214430 shift exponent 80 is too large for 64-bit type u64 (aka unsigned long long) ... Call Trace dump_stack_lvl+0xca/0x130 __ubsan_handle_shift_out_of_bounds+0x22c/0x280 ? __lock_acquire+0x6441/0x7c10 ioc_timer_fn+0x6cec/0x7750 ? blk_iocost_init+0x720/0x720 ? call_timer_fn+0x5d/0x470 call_timer_fn+0xfa/0x470 ? blk_iocost_init+0x720/0x720 __run_timer_base+0x519/0x700 ... Actual impact of this issue was not identified but I propose to fix the undefined behaviour. The proposed fix to prevent those out of bound shifts consist of precalculating exponent before using it the shift operations by taking min value from the actual exponent and maximum possible number of bits.",
    "keyphrases": {
        "rootcause": "",
        "weakness": "shift-out-of-bounds",
        "impact": "",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "blk_iocost"
    }
}
