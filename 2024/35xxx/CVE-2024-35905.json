{
    "cveId": "CVE-2024-35905",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved bpf Protect against int overflow for stack access size This patch re-introduces protection against the size of access to stack memory being negative the access size can appear negative as a result of overflowing its signed int representation. This should not actually happen, as there are other protections along the way, but we should protect against it anyway. One code path was missing such protections (fixed in the previous patch in the series), causing out-of-bounds array accesses in check_stack_range_initialized(). This patch causes the verification of a program with such a non-sensical access size to fail. This check used to exist in a more indirect way, but was inadvertendly removed in a833a17aeac7.",
    "keyphrases": {
        "rootcause": "",
        "weakness": "int overflow",
        "impact": "out-of-bounds array accesses",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "check_stack_range_initialized()"
    }
}
