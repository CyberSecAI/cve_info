{
    "cveId": "CVE-2024-35949",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved btrfs make sure that WRITTEN is set on all metadata blocks We previously would call btrfs_check_leaf() if we had the check integrity code enabled, which meant that we could only run the extended leaf checks if we had WRITTEN set on the header flags. This leaves a gap in our checking, because we could end up with corruption on disk where WRITTEN isnt set on the leaf, and then the extended leaf checks dont get run which we rely on to validate all of the item pointers to make sure we dont access memory outside of the extent buffer. However, since 732fab95abe2 (btrfs check-integrity remove CONFIG_BTRFS_FS_CHECK_INTEGRITY option) we no longer call btrfs_check_leaf() from btrfs_mark_buffer_dirty(), which means we only ever call it on blocks that are being written out, and thus have WRITTEN set, or that are being read in, which should have WRITTEN set. Add checks to make sure we have WRITTEN set appropriately, and then make sure __btrfs_check_leaf() always does the item checking. This will protect us from file systems that have been corrupted and no longer have WRITTEN set on some of the blocks. This was hit on a crafted image tweaking the WRITTEN bit and reported by KASAN as out-of-bound access in the eb accessors. The example is a dir item at the end of an eb. [2.042] BTRFS warning (device loop1) bad eb member start ptr 0x3fff start 30572544 member offset 16410 size 2 [2.040] general protecti",
    "keyphrases": {
        "rootcause": "",
        "weakness": "out-of-bound access",
        "impact": "memory corruption",
        "vector": "crafted image",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "btrfs"
    }
}
