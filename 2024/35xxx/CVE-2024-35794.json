{
    "cveId": "CVE-2024-35794",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved dm-raid really frozen sync_thread during suspend 1) commit f52f5c71f3d4 (md fix stopping sync thread) remove MD_RECOVERY_FROZEN from __md_stop_writes() and doesnt realize that dm-raid relies on __md_stop_writes() to frozen sync_thread indirectly. Fix this problem by adding MD_RECOVERY_FROZEN in md_stop_writes(), and since stop_sync_thread() is only used for dm-raid in this case, also move stop_sync_thread() to md_stop_writes(). 2) The flag MD_RECOVERY_FROZEN doesnt mean that sync thread is frozen, it only prevent new sync_thread to start, and it cant stop the running sync thread In order to frozen sync_thread, after seting the flag, stop_sync_thread() should be used. 3) The flag MD_RECOVERY_FROZEN doesnt mean that writes are stopped, use it as condition for md_stop_writes() in raid_postsuspend() doesnt look correct. Consider that reentrant stop_sync_thread() do nothing, always call md_stop_writes() in raid_postsuspend(). 4) raid_message can set/clear the flag MD_RECOVERY_FROZEN at anytime, and if MD_RECOVERY_FROZEN is cleared while the array is suspended, new sync_thread can start unexpected. Fix this by disallow raid_message() to change sync_thread status during suspend. Note that after commit f52f5c71f3d4 (md fix stopping sync thread), the test shell/lvconvert-raid-reshape.sh start to hang in stop_sync_thread(), and with previous fixes, the test w",
    "keyphrases": {
        "rootcause": "improper handling of MD_RECOVERY_FROZEN flag",
        "weakness": "time-of-check time-of-use (toctou)",
        "impact": "start new sync threads unexpectedly",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "",
        "component": "dm-raid"
    }
}
