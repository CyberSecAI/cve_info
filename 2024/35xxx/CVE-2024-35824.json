{
    "cveId": "CVE-2024-35824",
    "version": "1.0.0",
    "timestamp": "2024-12-06T11:32:07.789868+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved misc lis3lv02d_i2c Fix regulators getting en-/dis-abled twice on suspend/resume When not configured for wakeup lis3lv02d_i2c_suspend() will call lis3lv02d_poweroff() even if the device has already been turned off by the runtime-suspend handler and if configured for wakeup and the device is runtime-suspended at this point then it is not turned back on to serve as a wakeup source. Before commit b1b9f7a49440 (misc lis3lv02d_i2c Add missing setting of the reg_ctrl callback), lis3lv02d_poweroff() failed to disable the regulators which as a side effect made calling poweroff() twice ok. Now that poweroff() correctly disables the regulators, doing this twice triggers a WARN() in the regulator core unbalanced disables for regulator-dummy WARNING CPU 1 PID 92 at drivers/regulator/core.c2999 _regulator_disable ... Fix lis3lv02d_i2c_suspend() to not call poweroff() a second time if already runtime-suspended and add a poweron() call when necessary to make wakeup work. lis3lv02d_i2c_resume() has similar issues, with an added weirness that it always powers on the device if it is runtime suspended, after which the first runtime-resume will call poweron() again, causing the enabled count for the regulator to increase by 1 every suspend/resume. These unbalanced regulator_enable() calls cause the regulator to never be turned off and trigger the following WARN() on driver unbind WARNING CPU 1 PID 1724 at d",
    "keyphrases": {
        "rootcause": "unbalanced disables for regulator-dummy",
        "weakness": "",
        "impact": "never be turned off",
        "vector": "",
        "attacker": "",
        "product": "Linux kernel",
        "version": "before commit b1b9f7a49440",
        "component": "misc lis3lv02d_i2c"
    }
}
