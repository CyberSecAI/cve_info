{
    "cveId": "CVE-2020-25603",
    "version": "1.0.0",
    "timestamp": "2024-12-13T17:34:55.850537+00:00",
    "description": "An issue was discovered in Xen through 4.14.x. There are missing memory barriers when accessing/allocating an event channel. Event channels control structures can be accessed lockless as long as the port is considered to be valid. Such a sequence is missing an appropriate memory barrier (e.g., smp_*mb()) to prevent both the compiler and CPU from re-ordering access. A malicious guest may be able to cause a hypervisor crash resulting in a Denial of Service (DoS). Information leak and privilege escalation cannot be excluded. Systems running all versions of Xen are affected. Whether a system is vulnerable will depend on the CPU and compiler used to build Xen. For all systems, the presence and the scope of the vulnerability depend on the precise re-ordering performed by the compiler used to build Xen. We have not been able to survey compilers consequently we cannot say which compiler(s) might produce vulnerable code (with which code generation options). GCC documentation clearly suggests that re-ordering is possible. Arm systems will also be vulnerable if the CPU is able to re-order memory access. Please consult your CPU vendor. x86 systems are only vulnerable if a compiler performs re-ordering.",
    "keyphrases": {
        "rootcause": "missing memory barriers",
        "weakness": "",
        "impact": "hypervisor crash",
        "vector": "",
        "attacker": "malicious guest",
        "product": "Xen",
        "version": "through 4.14.x",
        "component": "event channel"
    }
}
